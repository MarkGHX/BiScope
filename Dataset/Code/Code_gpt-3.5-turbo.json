[
    "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
    "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n            current_group += char\n        elif char == \")\":\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = \"\"\n    return result\n\n# Testing the function\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\")) # Output: ['()', '(())', '(()())']",
    "def truncate_number(number: float) -> float:\n    return number % 1.0",
    "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
    "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)",
    "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
    "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(group: str) -> int:\n        max_level = 0\n        curr_level = 0\n        for char in group:\n            if char == '(':\n                curr_level += 1\n                max_level = max(max_level, curr_level)\n            elif char == ')':\n                curr_level -= 1\n        return max_level\n\n    return [parse_paren_group(group) for group in paren_string.split() if group]\n\n# Testing the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]",
    "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]",
    "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    \n    sum_val = sum(numbers)\n    product_val = 1\n    for num in numbers:\n        product_val *= num\n    \n    return sum_val, product_val",
    "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = float('-inf')\n    result = []\n    for num in numbers:\n        running_max = max(running_max, num)\n        result.append(running_max)\n    \n    return result\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))",
    "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    def is_palindrome_suffix(s: str) -> bool:\n        return s == s[::-1]\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome_suffix(string[:i]):\n            return string + string[:i][::-1]\n    \n    return ''",
    "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(char1: str, char2: str) -> str:\n        return '1' if char1 != char2 else '0'\n    \n    return ''.join([xor(char1, char2) for char1, char2 in zip(a, b)])",
    "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)",
    "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
    "def string_sequence(n: int) -> str:\n    return ' '.join([str(i) for i in range(n + 1)])",
    "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))",
    "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    beats = [note_map[note] for note in notes]\n    \n    return beats\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
    "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "def sort_numbers(numbers: str) -> str:\n    numeral_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numbers)",
    "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    min_difference = float('inf')\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            current_difference = abs(numbers[i] - numbers[j])\n            if current_difference < min_difference:\n                min_difference = current_difference\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    \n    return closest_pair\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    rescaled_numbers = [(x - min_number) / (max_number - min_number) for x in numbers]\n    return rescaled_numbers",
    "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]",
    "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
    "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i",
    "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    fact = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            fact.append(i)\n    if n > 1:\n        fact.append(n)\n    return fact",
    "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if Counter(numbers)[num] == 1]",
    "def flip_case(string: str) -> str:\n    return string.swapcase()",
    "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
    "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
    "def get_positive(l: list):\n    return [i for i in l if i > 0]",
    "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
    "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    left = -1000\n    right = 1000\n    tolerance = 1e-7\n    \n    while abs(right - left) > tolerance:\n        mid = (left + right) / 2\n        y_mid = poly(xs, mid)\n        \n        if y_mid == 0:\n            return mid\n        elif y_mid * poly(xs, left) < 0:\n            right = mid\n        else:\n            left = mid\n    \n    return (left + right) / 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "def sort_third(l: list):\n    lst_copy = l.copy()\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    indexes = [i for i in range(len(l)) if i % 3 == 0]\n    for i, val in zip(indexes, sorted_values):\n        lst_copy[i] = val\n    return lst_copy\n\n# Testing the function\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))",
    "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))",
    "def max_element(l: list):\n    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m",
    "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases\nprint(fizz_buzz(50))  # Output should be 0\nprint(fizz_buzz(78))  # Output should be 2\nprint(fizz_buzz(79))  # Output should be 3",
    "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    odd_indices = [l[i] for i in range(len(l)) if i % 2 != 0]\n    result = []\n    for even, odd in zip(even_indices, odd_indices):\n        result.append(even)\n        result.append(odd)\n    if len(even_indices) > len(odd_indices):\n        result.append(even_indices[-1])\n    return result",
    "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(s))",
    "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        fib = fibonacci(num)\n        if is_prime(fib):\n            count += 1\n    return fib\n\nprint(prime_fib(1)) # 2\nprint(prime_fib(2)) # 3\nprint(prime_fib(3)) # 5\nprint(prime_fib(4)) # 13\nprint(prime_fib(5)) # 89",
    "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nimport doctest\ndoctest.testmod()",
    "def car_race_collision(n: int):\n    return n ** 2",
    "def incr_list(l: list):\n    return [e + 1 for e in l]",
    "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
    "def change_base(x: int, base: int):\n    ret = ''\n    while x:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n# Testing the function with the given test cases\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'",
    "def triangle_area(a, h):\n    return (a * h) / 2.0",
    "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n <= 3:\n        return results[n]\n    for i in range(4, n+1):\n        results[3] = results[2] + results[1] + results[0] + results[3]\n        results[0], results[1], results[2] = results[1], results[2], results[3]\n    return results[-1]",
    "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 != 0:\n        return sorted_list[n//2]\n    else:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2",
    "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)//2):\n        if text[i] != text[-i-1]:\n            return False\n    return True",
    "def modp(n: int, p: int):\n    return pow(2, n, p)",
    "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\") for ch in s])",
    "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])",
    "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True",
    "def add(x: int, y: int):\n    return x + y",
    "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)",
    "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)",
    "def correct_bracketing(brackets: str):\n    depth = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            depth += 1\n        elif bracket == \">\":\n            depth -= 1\n            if depth < 0:\n                return False\n    return depth == 0",
    "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False",
    "def common(l1: list, l2: list):\n    common_elements = set()\n    for i in l1:\n        if i in l2:\n            common_elements.add(i)\n    return sorted(list(common_elements))",
    "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int):\n    largest = 1\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            largest = i\n    return largest\n\n# sample tests\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2",
    "def sum_to_n(n: int):\n    return n * (n + 1) // 2 \n\nimport doctest\ndoctest.testmod()",
    "def correct_bracketing(brackets: str):\n    depth = 0\n    for bracket in brackets:\n        if bracket == '(':\n            depth += 1\n        elif bracket == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0",
    "def derivative(xs: list):\n    return [i * j for i, j in enumerate(xs)][1:]",
    "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
    "def vowels_count(s):\n    s = s.lower()\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if i == len(s) - 1 and s[i] == 'y':\n            count += 1\n\n    return count\n\n# Test cases\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\nassert vowels_count(\"hello\") == 2\nassert vowels_count(\"crazy\") == 2\nassert vowels_count(\"Yesterday\") == 4",
    "def circular_shift(x, shift):\n    x_str = str(x)\n    \n    if shift > len(x_str):\n        return x_str[::-1]\n    \n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]",
    "def digitSum(s):\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum",
    "def fruit_distribution(s, n):\n    apples, oranges = map(int, [i for i in s.split() if i.isdigit()])\n    mangoes = n - apples - oranges\n    return mangoes",
    "def pluck(arr):\n    if len(arr) == 0:\n        return []\n    \n    evens = [num for num in arr if num % 2 == 0]\n    \n    if len(evens) == 0:\n        return []\n    \n    min_even = min(evens)\n    index = arr.index(min_even)\n    \n    return [min_even, index]",
    "def search(lst):\n    max_num = max(lst)\n    frq = [0] * (max_num + 1)\n    \n    for num in lst:\n        frq[num] += 1\n\n    ans = -1\n    for i in range(1, max_num + 1):\n        if i <= max_num and frq[i] >= i:\n            ans = max(ans, i)\n\n    return ans\n\n# Example test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1",
    "def strange_sort_list(lst):\n    res = []\n    switch = True\n    while lst:\n        if switch:\n            res.append(min(lst))\n        else:\n            res.append(max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res",
    "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))  # Output: 6.0\nprint(triangle_area(1, 2, 10))  # Output: -1",
    "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False",
    "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[-i-1]:\n            ans += 1\n    return ans",
    "def total_match(lst1, lst2):\n    total_chars_lst1 = sum([len(word) for word in lst1])\n    total_chars_lst2 = sum([len(word) for word in lst2])\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2",
    "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    for i in range(2, 100):\n        if is_prime(i):\n            for j in range(i, 100):\n                if is_prime(j):\n                    for k in range(j, 100):\n                        if is_prime(k):\n                            if i * j * k == a:\n                                return True\n    return False\n\n# Example\nprint(is_multiply_prime(30)) # Output: True",
    "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x",
    "def iscube(a):\n    return int(round(a ** (1. / 3))) ** 3 == abs(a)",
    "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count",
    "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"",
    "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True",
    "def numerical_letter_grade(grades):\n    def get_letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [get_letter_grade(gpa) for gpa in grades]",
    "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True\n\n# Examples\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False",
    "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 18 * 10 ** (n - 2)",
    "def solve(N):\n    total_sum = sum(int(i) for i in str(N))\n    binary_sum = bin(total_sum)[2:]\n    return binary_sum",
    "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
    "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    return ' '.join(ordered_words)",
    "def get_row(lst, x):\n    coordinates = []\n    \n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort()\n    return sorted(coordinates, key=lambda x: x[1], reverse=True)",
    "def sort_array(array):\n    sorted_array = sorted(array)\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array\n\n# Examples\nprint(sort_array([]))  # []\nprint(sort_array([5]))  # [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # [6, 5, 4, 3, 2, 1, 0]",
    "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for char in s:\n        if char.isalpha():\n            index = (alphabet.index(char) + 2) % 26\n            new_char = alphabet[index]\n            out += new_char\n        else:\n            out += char\n    return out",
    "def next_smallest(lst):\n    unique_lst = sorted(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]",
    "import re\n\ndef is_bored(S):\n    pattern = r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?|\\!)\\s'\n    sentences = re.split(pattern, S)\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n\n# Examples\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
    "def is_int(num):\n    return isinstance(num, int)\n\ndef any_int(x, y, z):\n    if is_int(x) and is_int(y) and is_int(z):\n        return x == y + z or y == x + z or z == x + y\n    return False",
    "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            letter = letter.swapcase()\n            if letter in vowels:\n                letter = vowels[letter]\n        encoded_message += letter\n    return encoded_message",
    "def skjkasdkd(lst):\n    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n        \n    maxx = 0\n    for num in lst:\n        if num > maxx and isPrime(num):\n            maxx = num\n    \n    return sum(map(int, str(maxx))) if maxx != 0 else 0",
    "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = all(key.islower() for key in dict.keys() if isinstance(key, str))\n    is_upper = all(key.isupper() for key in dict.keys() if isinstance(key, str))\n    \n    return is_lower or is_upper",
    "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes",
    "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    # Extract unit digits\n    unit_a = abs(a % 10)\n    unit_b = abs(b % 10)\n    \n    # Calculate product of unit digits\n    product = unit_a * unit_b\n    \n    return product",
    "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count",
    "def closest_integer(value):\n    if not value:\n        return 0\n    \n    if '.' in value:\n        value = value.rstrip('0')\n        \n    num = float(value)\n    if num % 1 == 0.5:\n        return int(num + (num > 0))\n    return round(num)",
    "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 2 * i + 1)\n    return pile",
    "def words_string(s):\n    return s.replace(',', ' ').split()",
    "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1",
    "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)",
    "def unique_digits(x):\n    odd_digit_elements = []\n    for num in x:\n        num_str = str(num)\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            odd_digit_elements.append(num)\n    return sorted(odd_digit_elements)",
    "def by_length(arr):\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_name[num] for num in arr]",
    "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    lst = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            lst.append(factorial(i))\n        else:\n            lst.append(sum(range(1, i + 1)))\n    return lst",
    "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
    "def count_nums(arr):\n    def digits_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    count = 0\n    for num in arr:\n        if digits_sum(num) > 0:\n            count += 1\n    return count\n\nimport doctest\ndoctest.testmod()",
    "def move_one_ball(arr):\n    if not arr:  # Check if the array is empty\n        return True\n    \n    sorted_arr = sorted(arr)  # Sort the original array to get the expected sorted array\n    min_val = min(arr)  # Find the minimum value in the array\n    \n    # Find the index of the minimum value and perform right shifts accordingly\n    idx = arr.index(min_val)\n    shifted_arr = arr[idx:] + arr[:idx]\n    \n    return shifted_arr == sorted_arr  # Compare the rearranged array with the sorted array and return True or False",
    "def exchange(lst1, lst2):\n    lst1_even_count = sum(1 for num in lst1 if num % 2 == 0)\n    lst1_odd_count = sum(1 for num in lst1 if num % 2 == 1)\n    lst2_even_count = sum(1 for num in lst2 if num % 2 == 0)\n    lst2_odd_count = sum(1 for num in lst2 if num % 2 == 1)\n    \n    return \"YES\" if lst1_odd_count <= lst2_even_count else \"NO\"",
    "def histogram(test):\n    if test:\n        letters = test.split()\n        count_dict = {}\n        \n        for letter in letters:\n            if letter in count_dict:\n                count_dict[letter] += 1\n            else:\n                count_dict[letter] = 1\n                \n        max_count = max(count_dict.values())\n\n        result = {letter: count for letter, count in count_dict.items() if count == max_count}\n\n        return result\n    else:\n        return {}",
    "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return result, result == result[::-1]",
    "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([c for c in s if int(c) % 2 != 0]), s, s, s) for s in lst]",
    "def minSubArraySum(nums):\n    max_sum = 0\n    min_sum = 0\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        max_sum = max(max_sum, current_sum)\n        if max_sum < 0:\n            max_sum = 0\n        min_sum = min(min_sum, max_sum)\n    return min_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6",
    "def max_fill(grid, capacity):\n    import math\n    \n    total_lowerings = 0\n    \n    for row in grid:\n        total_lowerings += math.ceil(sum(row) / capacity)\n    \n    return total_lowerings",
    "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
    "def select_words(s, n):\n    if not s:\n        return []\n    \n    vowels = \"aeiou\"\n    result = []\n    \n    words = s.split()\n    \n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.lower() not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result",
    "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\"",
    "def match_parens(lst):\n    def check(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n\n    if check(s1) or check(s2):\n        return 'Yes'\n    else:\n        return 'No'",
    "def maximum(arr, k):\n    if k == 0:\n        return []\n\n    sorted_arr = sorted(arr)\n    return sorted_arr[-k:]",
    "def solution(lst):\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0])",
    "def add_elements(arr, k):\n    return sum([num for num in arr[:k] if len(str(num)) <= 2])",
    "def get_odd_collatz(n):\n    odd_collatz = []\n    \n    if n % 2 == 0:\n        return odd_collatz\n    \n    odd_collatz.append(n)\n    \n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n            \n        if n % 2 != 0:\n            odd_collatz.append(n)\n    \n    return sorted(odd_collatz)",
    "def valid_date(date):\n    # Check if the date string is in the correct format\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n    \n    # Split the date string into its components\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is within 1-12 range\n    if month < 1 or month > 12:\n        return False\n\n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n\n    return True",
    "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        txt = txt.replace(',', ' ')\n        return txt.split()\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)",
    "def is_sorted(lst):\n    count_digit = {}\n    for num in lst:\n        if num in count_digit:\n            count_digit[num] += 1\n        else:\n            count_digit[num] = 1\n\n    for num in count_digit.values():\n        if num > 2:\n            return False\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True",
    "def intersection(interval1, interval2):\n    def is_prime(number):\n        if number < 2:\n            return False\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_end < intersection_start:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n\n    if intersection_length > 0 and is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"",
    "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num < 0:\n            product *= -1\n            sum_magnitudes += abs(num)\n        elif num > 0:\n            sum_magnitudes += num\n\n    return product * sum_magnitudes",
    "def minPath(grid, k):\n    def find_start(grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    return (i, j)\n\n    def find_neighbors(x, y):\n        neighbors = []\n        if x > 0:\n            neighbors.append((x - 1, y))\n        if x < len(grid) - 1:\n            neighbors.append((x + 1, y))\n        if y > 0:\n            neighbors.append((x, y - 1))\n        if y < len(grid[0]) - 1:\n            neighbors.append((x, y + 1))\n        return neighbors\n\n    def min_value_neighbors(x, y):\n        neighbors = find_neighbors(x, y)\n        min_val = float('inf')\n        for nx, ny in neighbors:\n            if grid[nx][ny] < min_val:\n                min_val = grid[nx][ny]\n        return min_val\n\n    def construct_path(start_x, start_y, min_val):\n        path = []\n        while k > 0:\n            path.append(grid[start_x][start_y])\n            if grid[start_x][start_y] == 1:\n                k -= 1\n            else:\n                min_val = min_value_neighbors(start_x, start_y)\n            for nx, ny in find_neighbors(start_x, start_y):\n                if grid[nx][ny] == min_val:\n                    start_x, start_y = nx, ny\n                    break\n        return path\n\n    start_x, start_y = find_start(grid)\n    min_val = min_value_neighbors(start_x, start_y)\n    return construct_path(start_x, start_y, min_val)",
    "def tri(n):\n    result = [0] * (n + 1)\n    if n > 0:\n        result[1] = 1\n    if n > 1:\n        result[2] = 1\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            result[i] = result[i - 1] + 1 + i // 2\n        else:\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n    return result",
    "def digits(n):\n    odd_product = 1\n    contains_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_product *= digit\n            contains_odd = True\n        n //= 10\n    return odd_product if contains_odd else 0",
    "def is_nested(string):\n    open_brackets = []\n    nested_brackets = []\n\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            open_brackets.append(i)\n        elif string[i] == \"]\":\n            if open_brackets:\n                nested_brackets.append((open_brackets.pop(), i))\n\n    return len(nested_brackets) >= 2\n\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True",
    "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total",
    "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    last_word = words[-1] if words else ''\n    if len(last_word) == 1 and 97 <= ord(last_word) <= 122:\n        return True\n    return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False",
    "def can_arrange(arr):\n    ind = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            ind = i - 1\n    return ind",
    "def largest_smallest_integers(lst):\n    negative_integers = list(filter(lambda x: x < 0, lst))\n    positive_integers = list(filter(lambda x: x > 0, lst))\n    \n    max_negative = None\n    min_positive = None\n    \n    if negative_integers:\n        max_negative = max(negative_integers)\n    \n    if positive_integers:\n        min_positive = min(positive_integers)\n    \n    return (max_negative, min_positive)",
    "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        \n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n        \n    if a > b:\n        return type(a)(a)\n    else:\n        return type(b)(b)\n\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None",
    "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True",
    "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    \n    for i in range(1, n+1):\n        fact_i = 1\n        for j in range(1, i+1):\n            fact_i *= j\n        special_fact *= fact_i\n    \n    return special_fact",
    "def fix_spaces(text):\n    new_text = \"\"\n    consecutive_spaces = 0\n    i = 0\n\n    while i < len(text):\n        if text[i] == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                new_text += \"-\"\n        else:\n            if consecutive_spaces <= 2:\n                new_text += \"_\" * consecutive_spaces\n            else:\n                new_text += \"-\"\n            new_text += text[i]\n            consecutive_spaces = 0\n        i += 1\n\n    if consecutive_spaces <= 2:\n        new_text += \"_\" * consecutive_spaces\n    else:\n        new_text += \"-\"\n    \n    return new_text\n\nprint(fix_spaces(\"Example\")) # \"Example\"\nprint(fix_spaces(\"Example 1\")) # \"Example_1\"\nprint(fix_spaces(\" Example 2\")) # \"_Example_2\"\nprint(fix_spaces(\" Example   3\")) # \"_Example-3\"",
    "def file_name_check(file_name):\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    before_dot, after_dot = parts\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'",
    "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",
    "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)",
    "def simplify(x, n):\n    x_numerator, x_denominator = list(map(int, x.split(\"/\")))\n    n_numerator, n_denominator = list(map(int, n.split(\"/\")))\n    \n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    \n    if result_numerator % result_denominator == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False",
    "def order_by_points(nums):\n    def digits_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digits_sum(x), nums.index(x)))",
    "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count",
    "from itertools import combinations\n\ndef get_max_triples(n):\n    A = [i * i - i + 1 for i in range(1, n+1)]\n    ans = [x for x in combinations(A, 3) if sum(x) % 3 == 0]\n    return len(ans)",
    "def bf(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    if planet1 not in planets or planet2 not in planets or planet1 == planet2:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2)",
    "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
    "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    if is_prime(n):\n        return x\n    return y",
    "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0) if lst else 0",
    "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]",
    "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"",
    "def cycpattern_check(a , b):\n    combined = a + a\n    for i in range(len(b)):\n        if combined[i:i+len(b)] == b:\n            return True\n    return False",
    "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
    "```\ndef int_to_mini_roman(number):\n    nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    result = \"\"\n    \n    i = 0\n    while number > 0:\n        for _ in range(number // nums[i]):\n            result += roman_numerals[i]\n            number -= nums[i]\n        i += 1\n    \n    return result.lower()",
    "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False",
    "def find_max(words):\n    words = sorted(words, key=lambda x: (-len(set(x)), x))\n    return words[0] if words else \"\"",
    "def eat(number, need, remaining):\n    eaten = 0\n    if need <= remaining:\n        eaten = need\n        remaining -= eaten\n    else:\n        eaten = remaining\n        remaining = 0\n    \n    total_eaten = number + eaten\n    return [total_eaten, remaining]",
    "def do_algebra(operator, operand):\n    expression = \"\"\n    for i in range(len(operator)):\n        expression += str(operand[i]) + \" \" + operator[i] + \" \"\n    expression += str(operand[-1])\n    return eval(expression)",
    "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n\n    return result",
    "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()",
    "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0 and num >= 2 and num <= 8]"
]