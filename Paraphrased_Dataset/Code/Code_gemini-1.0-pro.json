[
    "def has_close_elements(numbers: List[float], distance_threshold: float) -> bool:\n    \"\"\"Check if any two numbers in the provided list of numbers are closer to each other\n    than the provided distance threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
    "def distinguish_parenthetical_clusters(bracketed_sequence: str) -> list[str]:\n    \"\"\" Given a sequence of characters enclosed in parentheses, this function segregates them into distinct strings and presents them as a list.\n    Each distinct cluster within the sequence is encompassed by balanced parentheses (every opening parenthesis has a corresponding closing parenthesis) and is not nested within another cluster.\n    Any whitespace within the sequence is disregarded.\n    For instance:\n    >>> distinguish_parenthetical_clusters('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
    "def extract_decimal(number: float) -> float:\n    \"\"\" Given a number, it can be split into\n    an integer part (the largest integer smaller than the given number) and a decimal\n    part (the remaining part that's always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> extract_decimal(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0",
    "def is_balance_ever_negative(operations: List[int]) -> bool:\n    \"\"\" A sequence of deposit and withdrawal amounts is provided. Starting with an initial balance of\n        zero, at any point does the balance drop below zero? If so, return True. If not, return False.\n    >>> is_balance_ever_negative([1, 2, 3])\n    False\n    >>> is_balance_ever_negative([1, 2, -4, 5])\n    True\n    \"\"\"",
    "def mean_absolute_deviation(numbers: list) -> float:\n    \"\"\" Given a list of numbers, calculate the Mean Absolute Deviation around the mean of the dataset.\n    Mean Absolute Deviation is a measure of how much the data is spread out, and is calculated as the average\n    of the absolute differences between each element and the mean.\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(numbers)",
    "from typing import List\n\n\ndef intersperse(numbers: List[int], divider: int) -> List[int]:\n    \"\"\" Place the number `divider` in between every consecutive number of the list `numbers`.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    interlaced = []\n    for index in range(len(numbers) - 1):\n        interlaced.append(numbers[index])\n        interlaced.append(divider)\n\n    interlaced.append(numbers[-1])\n    return interlaced",
    "def determine_deepest_nesting(parenthetical_expression: str) -> List[int]:\n    \"\"\" Given a string containing multiple sets of nested parentheses separated by spaces, ascertain the maximum depth of nesting for each set.\n    For instance, in the expression \"(()()) ((())) () ((())())\", the deepest nesting is two for the first set, three for the second, one for the third, and three for the fourth.\n\n    Examples:\n        determine_deepest_nesting('(()()) ((())) () ((())())') == [2, 3, 1, 3]\n    \"\"\"\n    max_nesting_levels = []\n    for group in parenthetical_expression.split():\n        max_nesting_levels.append(calculate_deepest_nesting(group))\n    return max_nesting_levels\n\n\ndef calculate_deepest_nesting(parenthetical_group: str) -> int:\n    \"\"\" Auxiliary function for determining the deepest level of nesting within a given set of parentheses.\n\n    Examples:\n        calculate_deepest_nesting('()') == 1\n        calculate_deepest_nesting('(())') == 2\n        calculate_deepest_nesting('((()))') == 3\n        calculate_deepest_nesting('(()())') == 2\n        calculate_deepest_nesting('(()())((()))') == 3\n    \"\"\"\n    current_depth = 0\n    max_depth = 0\n    for character in parenthetical_group:\n        if character == \"(\":\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif character == \")\":\n            current_depth -= 1\n    return max_depth",
    "from typing import Sequence\n\ndef filter_for_substring(texts: Sequence[str], snippet: str) -> Sequence[str]:\n    \"\"\" Find all texts in a list that contain a specified snippet \n    >>> filter_for_substring([], 'a')\n    []\n    >>> filter_for_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [text for text in texts if snippet in text]",
    "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Given a list of integers, return a tuple containing their sum and product.\n    If the list is empty, the sum should be 0 and the product should be 1.\n    For example:\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return (total_sum, total_product)",
    "Sure, here is the enhanced version:\n\nFrom a given sequence of numbers, generate a list of the maximum element found until that point in the sequence.\n\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]",
    "def is_palindrome(string: str) -> bool:\n    \"\"\" Confirms if given string is a palindrome; reads the same forwards or backwards \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Manipulates supplied string to be the shortest palindrome starting with the same string.\n    Algorithm overview:\n    - Find the longest postfix of the supplied string that is a palindrome.\n    - Append a reverse copy of the string prefix not following the palindromic suffix to the end of the string.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    n = len(string)\n    for i in range(n//2):\n        if string[i] != string[n-i-1]:\n            break\n\n    prefix = string[:i]\n    postfix = string[i:]\n\n    return string + prefix[::-1]",
    "def string_xor(a: str, b: str) -> str:\n    \"\"\" Enter two strings, a and b, composed only of ones and zeros.\n    Perform a binary XOR operation on those strings, returning the result as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        else:\n            return 1\n\n    result: list[int] = []\n    for i in range(len(a)):\n        result.append(xor(int(a[i]), int(b[i])))\n    \n    return ''.join(map(str, result))",
    "def pick_lengthiest_string(strings: List[str]) -> Optional[str]:\n    \"\"\" Among a given list of strings, return the longest. If multiple strings are of equal length,\n    select the first encountered. If the input list is devoid of elements, return None.\n    >>> pick_lengthiest_string([])\n\n    >>> pick_lengthiest_string(['a', 'b', 'c'])\n    'a'\n    >>> pick_lengthiest_string(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"",
    "def greatest_common_divisor(num1: int, num2: int) -> int:\n    \"\"\"\n    Finds the greatest common divisor of two numbers, num1 and num2, using the Euclidean algorithm.\n\n    Examples:\n        greatest_common_divisor(3, 5) == 1\n        greatest_common_divisor(25, 15) == 5\n    \"\"\"\n    while num2:\n        num1, num2 = num2, num1 % num2\n    return num1",
    "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return an enumeration of all prefixes, shortest to longest, of the input string\n    >>> all_prefixes('abc')\n    ['', 'a', 'ab', 'abc']\n    \"\"\"\n    for i in range(len(string) + 1):\n        yield string[:i]",
    "def string_sequence(n: int) -> str:\n    \"\"\" Generate a sequence of space-delimited numbers starting from 0 upto n inclusive.\n    For example:\n    string_sequence(0) == '0'\n    string_sequence(5) == '0 1 2 3 4 5'\n    \"\"\"\n    numbers = []  # Initialize an empty list to store the sequence of numbers.\n    for i in range(n + 1):  # Iterate from 0 to n inclusive.\n        numbers.append(str(i))  # Append the string representation of each number to the list.\n    return ' '.join(numbers)  # Join the list of numbers into a single string with spaces as delimiters.",
    "def find_unique_characters_in_string(string: str) -> int:\n    \"\"\" Count the number of unique characters, case-insensitive, in the specified string\n    >>> find_unique_characters_in_string('xyzXYZ')\n    3\n    >>> find_unique_characters_in_string('Jerry')\n    4\n    \"\"\"\n    string = string.lower()\n    unique_characters = set(string)\n    return len(unique_characters)",
    "def dissect_symphony(musical_score: str) -> List[int]:\n    \"\"\"\n    This function takes a musical score represented as an ASCII string and converts it\n    into a list of integers, where each value corresponds to the number of beats a note lasts.\n\n    The musical score is defined as follows:\n        - 'o': whole note, lasts four beats\n        - 'o|': half note, lasts two beats\n        - '.|': quarter note, lasts one beat\n\n    For instance:\n    >>> dissect_symphony('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = musical_score.split()\n    return [note_durations[note] for note in notes]",
    "def how_many_times(original_string: str, sought_string: str) -> int:\n    \"\"\" Uncover the frequency of a substring's appearance within a given string, including overlapping instances.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    occurrences = 0\n    index = 0\n    while index < len(original_string):\n        if original_string[index: index + len(sought_string)] == sought_string:\n            occurrences += 1\n            index += len(sought_string)\n        else:\n            index += 1\n    return occurrences",
    "def sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_words('three one five')\n    'one three five'\n    \"\"\"",
    "def find_nearest_neighbors(numbers: list[float]) -> tuple[float, float]:\n    \"\"\" From a given array of numbers (of length at least two) choose and return two that are closest to each other\n    and return them in order (smaller number, larger number).\n    >>> find_nearest_neighbors([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_nearest_neighbors([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nearest_neighbors = None\n    closest_distance = None\n\n    for index, number in enumerate(numbers):\n        for second_index, second_number in enumerate(numbers):\n            if index != second_index:\n                new_distance = abs(number - second_number)\n\n                if closest_distance is None or new_distance < closest_distance:\n                    closest_distance = new_distance\n                    nearest_neighbors = (min(number, second_number), max(number, second_number))\n\n    return nearest_neighbors",
    "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n    largest = max(numbers)\n    return [(x - smallest) / (largest - smallest) for x in numbers]",
    "def filter_numbers(input_list: List) -> List[int]:\n    \"\"\"\n    Filters a list of values, returning only the integers.\n\n    Examples:\n        filter_numbers(['a', 3.14, 5]) == [5]\n        filter_numbers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]\n    \"\"\"\n    return [item for item in input_list if isinstance(item, int)]",
    "def string_length(text: str) -> int:\n    \"\"\"Returns the length of the provided text.\n    >>> string_length('')\n    0\n    >>> string_length('abc')\n    3\n    \"\"\"\n    return len(text)",
    "def largest_divisor(n: int) -> int:\n    \"\"\" Given a number n, this function finds and returns the largest number smaller than n that divides n evenly.\n    For example:\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1",
    "def get_prime_factors(number: int) -> list:\n    \"\"\"\n    Determine the prime factors of the given number and return them in ascending order.\n\n    Each factor should be present in the list as many times as it appears in the factorization of the input number.\n\n    The resulting list should multiply to the original input number.\n\n    Examples:\n    factorize(8)  ==  [2, 2, 2]\n    factorize(25) ==  [5, 5]\n    factorize(70) ==  [2, 5, 7]\n    \"\"\"\n    factors = []\n    current_factor = 2\n\n    while current_factor ** 2 <= number:\n        while number % current_factor == 0:\n            factors.append(current_factor)\n            number //= current_factor\n        current_factor += 1\n    \n    if number > 1:\n        factors.append(number)\n    return factors",
    "from typing import List\nimport collections\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Among a list of integers, eliminate any repeat offenders.\n    Upkeep the sequence of non-repeaters to reflect their original order.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]",
    "def flip_case(string: str) -> str:\n    \"\"\" Transform the case of each character in a given string, flipping lowercase to uppercase and vice versa.\n    For example:\n    flip_case('Hello') == 'hELLO'\n    \"\"\"\n    return ''.join(map(lambda c: c.lower() if c.isupper() else c.upper(), string))",
    "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Connects a list of strings into one long string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
    "from collections import deque\nfrom typing import Deque, List\n\ndef slick_filter(conversations: List[str], keywords: List[str]) -> List[str]:\n    \"\"\"\n    Remove a conversation from the list if none of the keywords are found within it, otherwise keep it.\n    :param conversations: A list of raw strings, each representing an individual conversation message.\n    :param keywords: A list of strings, each representing a keyword that should be searched for.\n    :return: A list of the conversations that contained the keywords.\n    >>> slick_filter([], ['hi', 'bye', 'bro'])\n    []\n    >>> slick_filter(['hello dude', 'how is it going bro', 'bye dude'], ['bro', 'dude'])\n    ['hello dude', 'how is it going bro', 'bye dude']\n    \"\"\"\n    deque_conversations = deque(conversations)\n    while deque_conversations:\n        curr_conversation = deque_conversations.popleft()\n        is_match = False\n        for keyword in keywords:\n            if keyword in curr_conversation:\n                is_match = True\n        if not is_match:\n            continue\n        else:\n            conversations.append(curr_conversation)\n    return conversations",
    "def select_positive(numbers: list):\n    \"\"\"Return a list containing only the positive numbers in the given list.\n    >>> select_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> select_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"",
    "def is_prime(number):\n    \"\"\"Return true if the given number is prime, and false otherwise.\n\n    Examples\n    ----------\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if number < 2:\n        return False\n    for divisor in range(2, int(number**0.5) + 1):\n        if number % divisor == 0:\n            return False\n    return True",
    "def poly(coefficients: list, value: float):\n    \"\"\"\n    Evaluates a polynomial with given coefficients at a particular value.\n    Returns the result of the polynomial evaluation:\n    coefficients[0] + coefficients[1] * value + coefficients[2] * value^2 + ... coefficients[n] * value^n\n    \"\"\"\n    return sum([coefficient * math.pow(value, index) for index, coefficient in enumerate(coefficients)])\n\n\ndef find_zero(coefficients: list):\n    \"\"\" Given coefficients of a polynomial,\n    find_zero finds the value of x where the polynomial evaluates to zero.\n    find_zero only looks for a single root, even if multiple roots exist.\n    Moreover, find_zero only accepts polynomials with an even number of coefficients\n    and a positive leading coefficient (largest non-zero coefficient),\n    as these conditions guarantee the existence of a real root.\n    For example:\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    assert len(coefficients) % 2 == 0, \"Polynomial must have an even number of coefficients\"\n    assert coefficients[-1] > 0, \"Leading coefficient must be positive\"\n\n    # Initialize the initial range where the root is expected to be\n    lower_bound, upper_bound = -1.0, 1.0\n\n    # Set the convergence tolerance\n    tolerance = 1e-10\n\n    # Iterate until the range where the root is located becomes sufficiently small\n    while abs(upper_bound - lower_bound) > tolerance:\n        # Calculate the midpoint of the current range\n        midpoint = (lower_bound + upper_bound) / 2.0\n\n        # Evaluate the polynomial at the midpoint\n        poly_value = poly(coefficients, midpoint)\n\n        # If the polynomial value at the midpoint is close to zero (within the tolerance),\n        # return the midpoint as the approximate root\n        if abs(poly_value) < tolerance:\n            return midpoint\n\n        # If the polynomial value at the midpoint is positive, the root must be in the\n        # lower half of the current range, so update the upper bound\n        if poly_value > 0:\n            upper_bound = midpoint\n        # Otherwise, the root must be in the upper half of the current range, so update the lower bound\n        else:\n            lower_bound = midpoint\n\n    # If the root cannot be found within the specified tolerance, return the midpoint of the final range\n    return (lower_bound + upper_bound) / 2.0",
    "def sort_third(l: list):\n    \"\"\"This function accepts a list and yields a list where the indices that are not divisible by three remain the same, while in the indices that are divisible by three, it's equal to the values of the corresponding indices of the initial list but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"",
    "def get_unique_elements(l: list):\n    \"\"\"Return the unique elements in a list after sorting them.\n    >>> get_unique_elements([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
    "def determine_maximum_value(item_sequence: list):\n    \"\"\"Identify and return the highest-valued item within the given sequence.\n\n    Examples:\n        determine_maximum_value([1, 2, 3]) == 3\n        determine_maximum_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123\n    \"\"\"\n    maximum = item_sequence[0]  # Initialize with the initial element\n    for item in item_sequence:\n        if item > maximum:\n            maximum = item\n    return maximum",
    "def fizz_buzz(n: int):\n    \"\"\"Determine the prevalence of the digit 7 in numbers less than n that are neatly divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    candidates = [num for num in range(n) if num % 11 == 0 or num % 13 == 0]\n    concatenated = ''.join(str(num) for num in candidates)\n    count = 0\n    for digit in concatenated:\n        if digit == '7':\n            count += 1\n    return count",
    "def reorganize_even(l: list):\n    \"\"\"This function accepts a list `l` and reworks it into a list `l'`, maintaining the order of elements in odd-indexed positions.\n    Within `l'`, the elements in even-indexed positions follow the order of the original elements in those positions, but in ascending order.\n\n    Examples:\n    >>> reorganize_even([1, 2, 3])\n    [1, 2, 3]\n\n    >>> reorganize_even([5, 6, 3, 4])\n    [3, 4, 5, 6]\n    \"\"\"",
    "def encode_cyclic(s: str):\n    \"\"\"\n    Shift characters within groups of three in a string, returning the encoded result.\n    \"\"\"\n    # Divide the string into groups of three characters.\n    groups = [s[i: i + 3] for i in range(0, len(s), 3)]\n    \n    # Shift the characters in each group, unless the group has fewer than three characters.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n\n    # Join the groups to form the encoded string.\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Reconstruct the original string from its encoded form generated by encode_cyclic.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(s))",
    "def nth_prime_fibonacci(target_position: int):\n    \"\"\"\n    nth_prime_fibonacci returns the n-th number that is both a Fibonacci number and prime.\n    For example:\n    nth_prime_fibonacci(1) == 2\n    nth_prime_fibonacci(2) == 3\n    nth_prime_fibonacci(3) == 5\n    nth_prime_fibonacci(4) == 13\n    nth_prime_fibonacci(5) == 89\n    \"\"\"\n    fibonacci_sequence = [0, 1]\n    while len(fibonacci_sequence) < target_position:\n        next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n        fibonacci_sequence.append(next_number)\n\n    for number in fibonacci_sequence[2:]:\n        if is_prime_number(number):\n            return number\n\n\ndef is_prime_number(number: int):\n    if number < 2:\n        return False\n\n    for factor in range(2, int(number**0.5) + 1):\n        if number % factor == 0:\n            return False\n\n    return True",
    "def triples_sum_to_zero(l: list):\n    \"\"\"\n    Given a list of integers, this function determines if there are three distinct elements\n    that sum to zero. It returns True if such a triplet exists, and False otherwise.\n\n    Examples:\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"",
    "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a long and straight road stretching out before you, like an endless ribbon.\n    n sleek cars zoom along this road, each going in a different direction; some head west, while others race east. In the distance, another set of n cars approaches, their headlights blazing.\n\n    These two groups of cars start out far apart, but as they speed along the road, their paths inevitably cross. With a deafening crash, a car traveling west collides with one heading east. Yet, these cars are extraordinary; they possess an unyielding strength, allowing them to continue their journeys as if nothing had happened.\n\n    This function returns the number of such spectacular collisions.\n    \"\"\"\n    collision_count = 0\n\n    for car1 in range(n):\n        for car2 in range(n):\n            if car1 + car2 == n - 1:\n                collision_count += 1\n\n    return collision_count",
    "def increment_list(list_in: list):\n    \"\"\"Return list with elements augmented by 1.\n\n    For example:\n    >>> increment_list([1, 2, 3])\n    [2, 3, 4]\n    >>> increment_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [element + 1 for element in list_in]",
    "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False",
    "def transform_numerical_base(initial_number: int, new_base: int):\n    \"\"\"Converts the numerical base of an initial number.\n    Returns the string representation of the converted number.\n    Base numbers are assumed to be less than 10.\n    Examples:\n    >>> transform_numerical_base(8, 3)\n    '22'\n    >>> transform_numerical_base(8, 2)\n    '1000'\n    >>> transform_numerical_base(7, 2)\n    '111'\n    \"\"\"\n\n    resulting_number = \"\"\n    while initial_number > 0:\n        resulting_number = str(initial_number % new_base) + resulting_number\n        initial_number //= new_base\n    return resulting_number",
    "def triangle_area(side, height):\n    \"\"\"Calculates the area of a triangle given its base and height.\n\n    Args:\n        side (float): The length of the base of the triangle.\n        height (float): The height of the triangle.\n\n    Returns:\n        float: The area of the triangle.\n    \"\"\"\n    return (side * height) / 2",
    "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence akin to the Fibonacci sequence but is defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Kindly provide a function that efficiently computes the nth element of the fib4 number sequence.  Please refrain from using recursion.\n\n    For instance:\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for _ in range(n - 4):\n        new_val = results[-1] + results[-2] + results[-3] + results[-4]\n        results.append(new_val)\n        results.pop(0)\n    return results[-1]",
    "def middle(values: list):\n    \"\"\"Finds the median of a list of numbers.\n    For example:\n    >>> middle([3, 1, 2, 4, 5])\n    3\n    >>> middle([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"",
    "def is_palindrome(text: str):\n    \"\"\"\n    Determine if a provided string is a palindrome, meaning it reads the same backwards and forwards.\n    For example:\n    is_palindrome('') == True\n    is_palindrome('aba') == True\n    is_palindrome('aaaaa') == True\n    is_palindrome('zbcd') == False\n    \"\"\"\n    # Check if the string is empty, in which case it is considered a palindrome\n    if not text:\n        return True\n\n    # Compare the first and last characters of the string, moving inward until they no longer match\n    for i in range(len(text) // 2):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n\n    # If the loop completes without finding a mismatch, the string is a palindrome\n    return True",
    "def modp(n: int, p: int):\n    \"\"\"Compute 2^n modulo p.\n\n    This function calculates the result of raising 2 to the power of n, and then taking the remainder after dividing by p.\n    Be mindful of potential numeric limitations.\n\n    Examples:\n        >>> modp(3, 5)\n        3\n        >>> modp(1101, 101)\n        2\n        >>> modp(0, 101)\n        1\n        >>> modp(3, 11)\n        8\n        >>> modp(100, 101)\n        1\n    \"\"\"",
    "def encode_shift(text: str):\n    \"\"\"\n    Shifts each character in the text by 5 positions to the right in the alphabet, effectively encoding it.\n    \"\"\"\n    encoded_text = \"\"\n    for character in text:\n        encoded_text += chr(((ord(character) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n    return encoded_text\n\n\ndef decode_shift(text: str):\n    \"\"\"\n    Shifts each character in the encoded text by 5 positions to the left in the alphabet, effectively decoding it.\n    \"\"\"\n    decoded_text = \"\"\n    for character in text:\n        decoded_text += chr(((ord(character) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n    return decoded_text",
    "def rid_of_vowels(words):\n    \"\"\"\n    rid_of_vowels is a function that accepts a string and returns a string minus the vowels.\n    >>> rid_of_vowels('')\n    ''\n    >>> rid_of_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> rid_of_vowels('abcdef')\n    'bcdf'\n    >>> rid_of_vowels('aaaaa')\n    ''\n    >>> rid_of_vowels('aaBAA')\n    'B'\n    >>> rid_of_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return \"\".join([s for s in words if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])",
    "def below_threshold(l: list, t: int):\n    \"\"\"Inform me if all numbers within the given list are below the specified threshold.\n    For example:\n    below_threshold([1, 2, 4, 10], 100)\n    True\n    below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for x in l:\n        if x >= t:\n            return \"Nope, not all numbers are below the threshold.\"\n    return \"Yes, all numbers are below the threshold.\"",
    "def tally_up(first: int, second: int):\n    \"\"\"Combine two numbers, first and second, to get their total.\n    >>> tally_up(2, 3)\n    5\n    >>> tally_up(5, 7)\n    12\n    \"\"\"\n    return first + second",
    "def does_contain_same_characters(s0: str, s1: str):\n    \"\"\"\n    Checks whether the two input strings contain the same characters.\n    >>> does_contain_same_characters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> does_contain_same_characters('abcd', 'dddddddabc')\n    True\n    >>> does_contain_same_characters('dddddddabc', 'abcd')\n    True\n    >>> does_contain_same_characters('eabcd', 'dddddddabc')\n    False\n    >>> does_contain_same_characters('abcd', 'dddddddabce')\n    False\n    >>> does_contain_same_characters('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
    "def get_fibonacci_number(number: int):\n    \"\"\"Calculate and return the n-th Fibonacci number.\n\n    For example:\n    get_fibonacci_number(10) == 55\n    get_fibonacci_number(1) == 1\n    get_fibonacci_number(8) == 21\n    \"\"\"",
    "def balance_parentheses(sequence: str) -> bool:\n    \"\"\"Verifies if the parentheses in a given string are balanced.\n\n    Args:\n        sequence (str): A string of opening and closing parentheses.\n\n    Returns (bool): True if balanced, False otherwise.\n\n    Examples:\n        balance_parentheses(\"()\") == True\n        balance_parentheses(\"((()))\") == True\n        balance_parentheses(\"(()\") == False\n        balance_parentheses(\")(\") == False\n    \"\"\"",
    "def monotonic(l: list):\n    \"\"\"Returns True if list elements are consistently ascending or descending.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l == sorted(l) or l == sorted(l, reverse=True)",
    "def common(l1: list, l2: list):\n    \"\"\"Return the sorted unique elements that are shared by the two lists.\n    For example, for the lists [1, 4, 3, 34, 653, 2, 5] and [5, 7, 1, 5, 9, 653, 121], the result should be [1, 5, 653].\n    \"\"\"\n    shared_elements = []\n    for element in l1:\n        if element in l2 and element not in shared_elements:\n            shared_elements.append(element)\n    return sorted(shared_elements)",
    "def largest_prime_factor(number: int):\n    \"\"\"Give me the biggest prime number that perfectly divides the input number (assume it's not prime and greater than 1).\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def check_prime(possible_prime: int):\n        if possible_prime < 2:\n            return False\n        for factor in range(2, possible_prime):\n            if possible_prime % factor == 0:\n                return False\n        return True\n\n    biggest_prime_factor = 1\n    for factor in range(2, number + 1):\n        if number % factor == 0 and check_prime(factor):\n            biggest_prime_factor = factor\n    return biggest_prime_factor",
    "def sum_to_n(n: int):\n    \"\"\"Calculate the sum of numbers from 1 to n.\n\n    For example:\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(n + 1))",
    "def check_bracketing(bracket_sequence: str):\n    \"\"\" bracket_sequence is a string of open and closed parentheses.\n    Return True if every opening parenthesis has a corresponding closing parenthesis.\n\n    >>> check_bracketing(\"(\")\n    False\n    >>> check_bracketing(\"()\")\n    True\n    >>> check_bracketing(\"(()())\")\n    True\n    >>> check_bracketing(\")(()\")\n    False\n    \"\"\"\n    nesting_depth = 0\n    for bracket in bracket_sequence:\n        if bracket == \"(\":\n            nesting_depth += 1\n        elif bracket == \")\":\n            nesting_depth -= 1\n            if nesting_depth < 0:\n                return False\n    return nesting_depth == 0",
    "def derivative(xs: list):\n    \"\"\" xs represents coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * p for i, p in enumerate(xs, start=1)]",
    "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is an intriguing sequence analogous to the Fibonacci sequence, defined by these rules:\n    -fibfib(0) = 0\n    -fibfib(1) = 0\n    -fibfib(2) = 1\n    -fibfib(n) = sum of fibfib(n-1), fibfib(n-2), and fibfib(n-3).\n    Design a function that efficiently computes the n-th FibFib number.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",
    "FIX = \"\"\"\nThrow in some more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Determine the number of vowels in a given word. Vowels include 'a', 'e', 'i', 'o', 'u', and 'y' when it appears at the end of the word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n    if s[-1] in 'yY':\n        vowel_count += 1\n    return vowel_count",
    "def circular_shift(number: int, shift: int) -> str:\n    \"\"\"Given an integer `number` and a shift value `shift`, perform a circular shift of the digits of the integer by `shift` positions to the right and return the result as a string.\n    If `shift` is greater than the number of digits in `number`, simply reverse the digits.\n    For example:\n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    \"\"\"",
    "def digitSum(s):\n    \"\"\"Task\n    Compute the sum of the ASCII codes for all uppercase characters in a string.\n\n    Examples:\n        digitSum(\"\") -> 0\n        digitSum(\"abAB\") -> 131\n        digitSum(\"abcCd\") -> 67\n        digitSum(\"helloE\") -> 69\n        digitSum(\"woArBld\") -> 131\n        digitSum(\"aAaaaXa\") -> 153\n    \"\"\"\n    running_sum = 0\n    for character in s:\n        if character.isupper():\n            running_sum += ord(character)\n    return running_sum",
    "def fruit_distribution(sentence, total_fruit):\n    \"\"\"\n    Imagine a basket of fruit containing apples, oranges, and mangos. Suppose you are provided with a sentence that counts how many apples and oranges are in the basket. Additionally, you have the total number of fruits in the basket. Determine how many mangos are in the basket.\n    For instance:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    items = sentence.split()\n    fruit_count = 0\n\n    for item in items:\n        if item.isdigit():\n            fruit_count += int(item)\n\n    mango_count = total_fruit - fruit_count\n    return mango_count",
    "def pluck(branch):\n    \"\"\"\n    \"Given an array representing a branch of a tree containing non-negative integer nodes,\n    your task is to pluck a node and return it.\n    The plucked node should be the one with the lowest non-zero even value.\n    If multiple nodes share the same lowest even value, the one with the lowest index should be returned.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the lowest non-zero even value, and its index is the lowest.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the lowest non-zero even value, and its index is the lowest. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the lowest non-zero even value, and there are two zeros,\n                     so we'll pick the one with the lowest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if not branch:\n        return []\n\n    non_zero_evens = list(filter(lambda x: x % 2 == 0 and x != 0, branch))\n    if not non_zero_evens:\n        return []\n\n    smallest_even = min(non_zero_evens)\n    index = branch.index(smallest_even)\n    return [smallest_even, index]",
    "seek_supreme_integer(lst):\n    '''\n    Given a non-empty collection of positive integers, determine the greatest integer that surpasses \n    zero, and possesses a frequency that exceeds or matches the value of the integer itself. \n    The frequency of an integer signifies the count of its occurrences within the list.\n    If no such value exists, return -1.\n    Examples:\n        seek_supreme_integer([4, 1, 2, 2, 3, 1]) == 2\n        seek_supreme_integer([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        seek_supreme_integer([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0] * (max(lst) + 1)\n    for x in lst:\n        frq[x] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    return ",
    "bizarrely_order_array(nums):\n    '''\n    Given an array of whole numbers, return an array in a peculiar order:\n    Starting with the smallest number, followed by the largest remaining number, then the next smallest, then the second largest, and so forth.\n\n    Samples:\n    bizarrely_order_array([1, 2, 3, 4]) == [1, 4, 2, 3]\n    bizarrely_order_array([5, 5, 5, 5]) == [5, 5, 5, 5]\n    bizarrely_order_array([]) == []\n    '''\n    result = []\n    continuously_alternating = True\n    while nums:\n        if continuously_alternating:\n            result.append(min(nums))\n            nums.remove(result[-1])\n        else:\n            result.append(max(nums))\n            nums.remove(result[-1])\n        continuously_alternating = not continuously_alternating\n    return res",
    "triangle_area(side_a, side_b, side_c):\n    '''\n    Given the length of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal places if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if side_a + side_b <= side_c or side_b + side_c <= side_a or side_c + side_a <= side_b:\n        return -1\n\n    # Calculate semi-perimeter\n    semi_perimeter = (side_a + side_b + side_c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (semi_perimeter * (semi_perimeter - side_a) * (semi_perimeter - side_b) * (semi_perimeter - side_c)) ** 0.5\n\n    # Round the area to two decimal places\n    return round(area,",
    "will_it_soar(item, capacity):\n    '''\n    Can the given item take flight?\n\n    An item can fly if it's well-balanced (a palindromic list) and its total weight doesn't exceed the maximum capacity.\n\n    For instance:\n    will_it_soar([1, 2], 5) \u279e False \n    # 1+2 is under the max capacity, but the item isn't balanced.\n\n    will_it_soar([3, 2, 3], 1) \u279e False\n    # It's balanced, but 3+2+3 is over the max capacity.\n\n    will_it_soar([3, 2, 3], 9) \u279e True\n    # 3+2+3 is under the max capacity, and the item is balanced.\n\n    will_it_soar([3], 5) \u279e True\n    # 3 is under the max capacity, and it's balanced.\n    '''\n    return sum(item) <= capacity and item == item[::",
    "def minimum_alterations(sequence):\n    \"\"\"\n    Given a sequence of numbers, determine the minimum number of changes required to make it a palindrome.\n    A palindrome is a sequence that reads the same forwards and backwards.\n    In each change, one number can be replaced with any other number.\n\n    For instance:\n    minimum_alterations([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n    minimum_alterations([1, 2, 3, 4, 3, 2, 2]) == 1\n    minimum_alterations([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    alterations = 0\n    for index in range(len(sequence) // 2):\n        if sequence[index] != sequence[len(sequence) - index - 1]:\n            alterations += 1\n    return alterations",
    "total_match(lst1, lst2):\n    '''\n    Determine which list of strings contains fewer total characters and return that list.\n\n    If both lists contain the same number of characters, return the first list.\n\n    Examples:\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    chars_in_lst1 = sum(len(word) for word in lst1)\n    chars_in_lst2 = sum(len(word) for word in lst2)\n\n    if chars_in_lst1 < chars_in_lst2:\n        return lst1\n    elif chars_in_lst1 > chars_in_lst2:\n        return lst2\n    else:\n        return l",
    "def is_multiply_prime(number: int) -> bool:\n    \"\"\"Determine if a number is the product of three prime numbers, specifically for numbers less than 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, n // 2 + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, 100):\n        if not is_prime(i):\n            continue\n        for j in range(i, 100):\n            if not is_prime(j):\n                continue\n            for k in range(j, 100):\n                if not is_prime(k):\n                    continue\n                if i * j * k == number:\n                    return True\n    return False",
    "def is_simple_power(x, n):\n    \"\"\"Check if a number is a simple power of another.\n\n    A number x is a simple power of n if there exists an integer k such that x == n**k.\n\n    Args:\n        x: The number to check.\n        n: The base to check against.\n\n    Returns:\n        True if x is a simple power of n, False otherwise.\n    \"\"\"\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x",
    "is_cube(num):\n    '''\n    Determine if a given integer is a perfect cube.\n\n    Args:\n        num: The integer to check.\n\n    Returns:\n        True if the integer is a perfect cube, False otherwise.\n    '''\n    num = abs(num)\n    result = round(num ** (1/3))\n    return result ** 3 == ",
    "def hex_key(num):\n    \"\"\"Count the number of prime hexadecimal digits in a string.\n\n    Hexadecimal digits are 0-9 and A-F, and prime numbers are those\n    greater than 1 that cannot be divided evenly by any smaller numbers.\n    Therefore, the prime hexadecimal digits are 2, 3, 5, 7, B, and D.\n\n    For example:\n     - \"AB\" has 1 prime digit (B).\n     - \"1077E\" has 2 prime digits (7 and E).\n     - \"ABED1A33\" has 4 prime digits (B, D, B, and D).\n     - \"123456789ABCDEF0\" has 6 prime digits (2, 3, 5, 7, B, and D).\n     - \"2020\" has 2 prime digits (2 and 2).\n\n    Args:\n        num (str): A hexadecimal number as a string.\n\n    Returns:\n        int: The number of prime hexadecimal digits in the string.\n    \"\"\"",
    "Certainly! Here is the sentence with enhanced word choices:\n\n\"Given a number in decimal format, we're here to transform it into its binary counterpart. The result will be presented as a string, where each character represents a binary digit, either '0' or '1'.\n\nTo make things a bit tidier, we'll add 'db' before and after the string.\"",
    "def is_happy(string):\n    \"\"\"Consider a string as happy if it's at least three characters long and no three consecutive characters are the same. Determine if the given string meets these criteria.\n    Examples:\n        is_happy('a') == False\n        is_happy('aa') == False\n        is_happy('abcd') == True\n        is_happy('aabb') == False\n        is_happy('adb') == True\n        is_happy('xyy') == False\n    \"\"\"\n    return len(string) >= 3 and all(char != string[i - 1] and char != string[i + 1] for i, char in enumerate(string[1:-1]))",
    "def calculate_letter_grades(student_gpas):\n    \"\"\"In the twilight hours of the semester, as the semester draws to a close, the esteemed educator\n    finds herself grappling with the arduous task of assigning grades to her eager young scholars.\n    Once a master of her craft, she now faces a perplexing dilemma: her meticulous grading algorithm,\n    the very cornerstone of her evaluation process, has vanished without a trace.\n\n    In a valiant attempt to salvage the situation, she has entrusted you, a brilliant coder,\n    with the task of devising a function that, given a list of GPAs, can conjure forth a corresponding list of letter grades.\n    The following rubric shall guide your endeavors:\n\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Example:\n    grade_equation([4.0, 3.8, 1.7, 2.2, 3.5]) ==> ['A+', 'A-', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in student_gpas:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n            \n    return letter_grades",
    "def prime_length(word: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(word)\n    if length <= 1:\n        return False\n\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n\n    return True",
    "def count_one_start_end_integers(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the number of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 9 * (10 ** (n - 1)) * 2",
    "def total_binary_digit_sum(given_num):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        given_num integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_representation = bin(given_num)[2:]\n    total = 0\n    for digit in binary_representation:\n        total += int(digit)\n    return bin(total)[2:]",
    "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. Find the sum of the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sm = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sm += lst[i]\n    return sm",
    "def anti_shuffle(utterance: str) -> str:\n    \"\"\"\n    Craft a written transcript where each word is a reimagined version of itself, with its characters orchestrated in ascending order based on their ASCII values.\n    Preserve the sequence of words and blank spaces within the sentence.\n\n    Examples:\n    anti_shuffle('Hi') yields 'Hi'\n    anti_shuffle('hello') yields 'ehllo'\n    anti_shuffle('Hello World!!!') yields 'Hello !!!Wdlor'\n    \"\"\"\n    words = utterance.split(' ')\n    reimagined_words = []\n    for word in words:\n        characters = sorted(word)\n        reimagined_words.append(''.join(characters))\n    return ' '.join(reimagined_words)",
    "def get_row(collection_of_lists, number_to_search_for):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given a list of lists, and integer x, find all occurrences of integers x in the lists,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    if not collection_of_lists:\n        return []\n    result = [(row_index, column_index) for row_index in range(len(collection_of_lists)) for column_index in range(len(collection_of_lists[row_index])) if collection_of_lists[row_index][column_index] == number_to_search_for]\n\n    result.sort(key=lambda coordinate: coordinate[1], reverse=True)\n    result.sort(key=lambda coordinate: coordinate[0])\n    return result",
    "def sort_array(array: list[int]) -> list[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will need to sort the given array in ascending order if the sum of the first and last elements' values is odd,\n    or sort it in descending order if the sum of the first and last elements' values is even.\n\n    Note:\n    * don't modify the original array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    array_length = len(array)\n    if array_length == 0:\n        return []\n\n    array_copy = array.copy()\n    first_last_sum = array_copy[0] + array_copy[array_length - 1]\n    should_sort_descending = first_last_sum % 2 == 0\n\n    array_copy.sort(reverse=should_sort_descending)\n    return array_copy",
    "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being twisted. \n    The alphabet should be twisted in a way that the letters skip down by double two.\n    For instance:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    dict = string.ascii_lowercase\n    result = \"\"\n    for char in s:\n        if char in dict:\n            index = dict.index(char)\n            result += dict[(index + 2 * 2) % 26]\n        else:\n            result += char\n    return result",
    "def second_smallest(integer_list):\n    \"\"\"\n    You're given a collection of integers.\n    Craft a function, second_smallest, which finds and returns the second smallest number within the list.\n    If no such number exists, gracefully return None.\n\n    Examples:\n    second_smallest([1, 2, 3, 4, 5]) == 2\n    second_smallest([5, 1, 4, 3, 2]) == 2\n    second_smallest([]) == None\n    second_smallest([1, 1]) == None\n    \"\"\"",
    "def tally_up_boredoms(conversation):\n    \"\"\"\n    Your mission: count the number of times the word \"I\" starts a sentence in a given conversation.\n    Sentences are considered to end with '.', '?', or '!'\n   \n    For instance:\n    >>> count_boredoms(\"Hello, world.\")\n    0\n    >>> count_boredoms(\"The clouds dance above. The grass whispers secrets. I love this symphony of nature.\")\n    1\n    \"\"\"\n    sentences = conversation.split('.?!')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            boredom_count += 1\n    return boredom_count",
    "any_int(num1, num2, num3):\n    '''\n    Determine if any of the three given integers add up to the sum of the other two.\n    Returns True if this is the case, False otherwise.\n\n    Examples:\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n   '''\n    sum1 = num1 + num2\n    sum2 = num2 + num3\n    sum3 = num3 + num1\n    return (num1 == sum2 or num2 == sum3 or num3 == su",
    "Vowels undergo an astonishing metamorphosis as they don don fancy disguises, donning \"c\" for \"a,\" \"g\" for \"e,\" \"k\" for \"i,\" \"q\" for \"o,\" and \"w\" for \"u.\"  Unveiling the letters' hidden potential, consonants boldly take on their counterparts' roles, with uppercase and lowercase playfully switching places.  The result?  A symphony of altered characters, weaving a tapestry of linguistic delight.",
    "def find_largest_prime_digit_sum(input_list):\n    \"\"\"Determine the sum of digits of the largest prime number in a given list of integers.\n\n    Examples:\n    For [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]: Output is 10\n    For [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]: Output is 25\n    For [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]: Output is 13\n    For [0,724,32,71,99,32,6,0,5,91,83,0,5,6]: Output is 11\n    For [0,81,12,3,1,21]: Output is 3\n    For [0,8,1,2,1,7]: Output is 7\n    \"\"\"\n    max_prime = 0\n    for number in input_list:\n        if number > max_prime and is_prime(number):\n            max_prime = number\n\n    digit_sum = 0\n    while max_prime > 0:\n        digit_sum += max_prime % 10\n        max_prime //= 10\n\n    return digit_sum\n\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for divisor in range(2, int(number ** 0.5) + 1):\n        if number % divisor == 0:\n            return False\n    return True",
    "def check_dict_key_casing(dictionary):\n    \"\"\"\n    Determine whether all keys in a provided dictionary share the same casing,\n    either uppercase or lowercase. Return True if casing is consistent, False otherwise.\n    Handle empty dictionaries accordingly.\n    Examples:\n    check_dict_key_casing({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_key_casing({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_key_casing({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_key_casing({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_key_casing({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dictionary:\n        return False\n\n    casing = \"initial\"\n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        \n        if casing == \"initial\":\n            if key.isupper():\n                casing = \"uppercase\"\n            else:\n                casing = \"lowercase\"\n        elif casing == \"uppercase\":\n            if not key.isupper():\n                return False\n        elif casing == \"lowercase\":\n            if not key.islower():\n                return False\n\n    return True",
    "def tally_primes(limit):\n    \"\"\"Determine all prime numbers up to a given bound and present them in a list.\n\n    Given an integer that is not negative, return an array comprising the first n primes that are less than that value.\n    For instance:\n    tally_primes(5) => [2,3]\n    tally_primes(11) => [2,3,5,7]\n    tally_primes(0) => []\n    tally_primes(20) => [2,3,5,7,11,13,17,19]\n    tally_primes(1) => []\n    tally_primes(18) => [2,3,5,7,11,13,17]\n    \"\"\"",
    "def multiply(a, b):\n    \"\"\"Calculate the product of the last digits of two integers, ensuring they're positive.\n\n    Examples:\n        multiply(148, 412): Result: 16\n        multiply(19, 28): Result: 72\n        multiply(2020, 1851): Result: 0\n        multiply(14, -15): Result: 20\n    \"\"\"",
    "def tally_majestic_vowels(string):\n    \"\"\"\n    Determine the quantity of uppercase vowels found in even-numbered positions within a provided string.\n\n    For instance:\n    tally_majestic_vowels('aBCdEf') returns 1\n    tally_majestic_vowels('abcdefg') returns 0\n    tally_majestic_vowels('dBBE') returns 0\n    \"\"\"\n    regal_vowel_count = 0\n    for position in range(0, len(string), 2):\n        if string[position] in \"AEIOU\":\n            regal_vowel_count += 1\n\n    return regal_vowel_count",
    "closest_integer(value: str) -> int:\n    '''\n    Determine the closest integer to a given value represented as a string.\n    When the value is equidistant from two integers, round it away from zero.\n\n    For instance:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero signifies that if the provided value is equidistant\n    from two integers, the result should be the one furthest from zero.\n    For example, closest_integer(\"14.5\") should return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    if not value:\n        return 0\n\n    stripped_value = value.rstrip('0')\n    if '.' not in stripped_value:\n        return int(stripped_value)\n\n    as_float = float(value)\n    if value.endswith('.5'):\n        return int(math.ceil(as_float) if as_float > 0 else math.floor(as_float))\n\n    return round(as_flo",
    "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to construct a pile of n tiers of stones.\n    The first tier has n stones.\n    The number of stones in the next tier is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each tier in a list, where element at index\n    i represents the number of stones in the tier (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [n + 2 * i for i in range(n)]",
    "def word_list(sentence):\n    \"\"\"\n    You will be given a sentence of words separated by commas or spaces. Your task is\n    to split the sentence into words and return a list of the words.\n\n    For example:\n    word_list(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    word_list(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return sentence.replace(\",\", \" \").split()",
    "def biggest_even_in_range(from_num: int, to_num: int) -> int:\n    \"\"\"This function takes two positive numbers as input and returns the\n    largest even integer in the range from the first number to the second inclusive.\n    If there are no even numbers in the range, then the function returns -1.\n\n    For example:\n    biggest_even_in_range(12, 15) = 14\n    biggest_even_in_range(13, 12) = -1\n    \"\"\"",
    "def rounded_avg(n, m):\n    \"\"\"A kind human being, I shall unveil the concealed wisdom. \n    You are given two numbers, n and m, both non-negative integers. Your task is to find the average of all the numbers from n to m, not forgetting n and m themselves. Then, with a gentle touch, round this average to the nearest whole number and convert it to binary, a language understood by machines.\n    But beware, if n is greater than m, a grave error has occurred. In such a case, I will sadly return -1 as a sign of my distress.\n    Example:\n    rounded_avg(1, 5) whispers \"0b11\"\n    rounded_avg(7, 5) cries -1 in dismay\n    rounded_avg(10, 20) sings \"0b1111\"\n    rounded_avg(20, 33) dances \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)",
    "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that doesn't contain any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 == 1 for digit in str(num)):\n            result.append(num)\n\n    return sorted(result)",
    "def by_length(arr):\n    \"\"\"\n    Given an array of integers, compile a list of their number names for the integers that fall between 1 and 9 inclusive.\n    First, arrange the array in ascending order, then flip the order of the resulting array, and finally, substitute each digit with its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any unfamiliar numbers, just skip them:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if not arr:\n        return []\n\n    number_names = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    sorted_numbers = [number_names[number] for number in sorted([number for number in arr if 1 <= number <= 9])]\n    reversed_numbers = sorted_numbers[::-1]\n    return reversed_numbers",
    "def f(n: int) -> list[int]:\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of length n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    For instance:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    results = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            product = 1\n            for j in range(1, i + 1):\n                product *= j\n            results.append(product)\n        else:\n            total = 0\n            for j in range(1, i + 1):\n                total += j\n            results.append(total)\n\n    return results",
    "def enumerate_even_odd_palindromes(given_integer: int) -> tuple[int, int]:\n    \"\"\"\n    This function takes a positive integer n and returns a tuple that includes the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    For Example:\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindrome_tally = 0\n    odd_palindrome_tally = 0\n\n    def ascertain_palindrome(number: int) -> bool:\n        return str(number) == str(number)[::-1]\n\n    for number in range(1, given_integer + 1):\n        if number % 2 != 0 and ascertain_palindrome(number):\n            odd_palindrome_tally += 1\n        elif number % 2 == 0 and ascertain_palindrome(number):\n            even_palindrome_tally += 1\n\n    return (even_palindrome_tally, odd_palindrome_tally)",
    "def count_positive_digit_sum_nums(arr):\n    \"\"\"\n    Calculate the count of integers with a positive sum of digits in a list.\n\n    Integers with negative signs have their first digit negated. For instance,\n    -123 has digit list [-1, 2, 3].\n\n    Examples:\n        count_positive_digit_sum_nums([]) == 0\n        count_positive_digit_sum_nums([-1, 11, -11]) == 1\n        count_positive_digit_sum_nums([1, 1, 2]) == 3\n    \"\"\"\n    def calculate_digit_sum(num):\n        if num < 0:\n            neg_sign = -1\n            num = abs(num)\n        else:\n            neg_sign = 1\n        digit_list = [int(digit) for digit in str(num)]\n        if neg_sign == -1:\n            digit_list[0] *= -1\n        return sum(digit_list)\n\n    return len(list(filter(lambda n: calculate_digit_sum(n) > 0, arr)))",
    "def move_one_ball(nums):\n    \"\"\"An array 'nums' contains random integers arr[1], arr[2], ..., arr[N]. Determine if it's \n    possible to get a sequentially increasing array by repeatedly shifting the array right. \n\n    A right shift means moving all elements of the array by one position to the right, \n    and the last element is moved to the beginning of the array (0th index).\n\n    If it's feasible to obtain an increasing array through right shifts, return True; \n    otherwise, return False. Note that an empty array is considered increasing.\n\n    All elements in the input array are unique.\n\n    Examples:\n\n    move_one_ball([3, 4, 5, 1, 2]) == True\n    Explanation: Two right shifts can make the array [1, 2, 3, 4, 5].\n\n    move_one_ball([3, 5, 4, 1, 2]) == False\n    Explanation: No series of right shifts can produce a sequentially increasing array.\n    \"\"\"",
    "def exchange(list_one, list_two):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether you can swap some numbers between them to make list_one a list of only even numbers.\n    There is no limit on the number of exchanged elements between list_one and list_two.\n    If you can exchange elements between list_one and list_two to make\n    all the elements of list_one to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd_count = 0\n    even_count = 0\n    for number in list_one:\n        if number % 2 != 0:\n            odd_count += 1\n\n    for number in list_two:\n        if number % 2 == 0:\n            even_count += 1\n\n    if even_count >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\"",
    "def histogram(text):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Examples:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    frequencies = {}\n    max_frequency = 0\n    words = text.split()\n\n    for word in words:\n        if word not in frequencies:\n            frequencies[word] = 1\n        else:\n            frequencies[word] += 1\n\n        if frequencies[word] > max_frequency:\n            max_frequency = frequencies[word]\n\n    result = {}\n    for word, frequency in frequencies.items():\n        if frequency == max_frequency:\n            result[word] = frequency\n\n    return result",
    "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to remove all the characters in s that are equivalent to any character in c, and then verify if the resulting string is a palindrome.\n    A string is called a palindrome if it reads the same backward as forwards.\n    You should return a tuple containing the result string and a boolean indicating the result of the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    new_str = ''.join([ch for ch in s if ch not in c])\n    return new_str,new_str==new_str[::-1]",
    "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements four in the string four of the input.\"]\n    >>> odd_count(['three',\"11111111\"])\n    [\"the number of odd elements one in the string one of the input.\",\n     \"the number of odd elements eight in the string eight of the input.\"]\n    \"\"\"\n    res = []\n    for i, array in enumerate(lst):\n        n = sum(int(d)%2==1 for d in array)\n        res.append(f\"the number of odd elements {n} in the string {n} of the input.\")\n    return res",
    "def findMinimumSubarraySum(arr):\n    maximum_sum = 0\n    current_sum = 0\n    for number in arr:\n        current_sum -= number\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > maximum_sum:\n            maximum_sum = current_sum\n    if maximum_sum == 0:\n        minimum_value = min(arr)\n        maximum_sum = minimum_value\n    minimum_sum = -maximum_sum\n    return minimum_sum",
    "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    num_wells = len(grid)\n    well_length = len(grid[0])\n\n    buckets_needed = 0\n\n    for well in grid:\n        water_units = sum(well)\n        buckets_needed += math.ceil(water_units / capacity)\n\n    return buckets_needed",
    "def rectify_array_order(arr):\n    \"\"\"\n    In this Kata, your task is to sort an array of non-negative integers according to\n    the count of ones in their binary representation in ascending order.\n    In case of equal counts, sort based on their decimal value.\n\n    For instance:\n    >>> arrange_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> arrange_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> arrange_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr.sort()\n    arr.sort(key=lambda x: bin(x)[2:].count('1'))\n    return arr",
    "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, can you ascertain a list containing \n    all words from string s that comprise precisely n consonants, in the order they \n    materialize in string s?\n    Should string s be devoid of words, your function should yield an empty list.\n    Take note that the input string contains solely letters and spaces.\n    For instance:\n    select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) == []\n    select_words(\"Hello world\", 4) == [\"world\"]\n    select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        num_consonants = 0\n        for c in word.lower():\n            if c not in ['a', 'e', 'i', 'o', 'u']:\n                num_consonants += 1\n        if num_consonants == n:\n            result.append(word)\n    return result",
    "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:  # If the word is less than 3 characters long, return an empty string.\n        return \"\"\n    \n    n = len(word)\n    for i in range(n-2,-1,-1):  # Iterate from the second to last character to the first character.\n        # If the current character is a vowel and the characters before and after it are consonants, return the current character.\n        if word[i] in \"AEIOUaeiou\" and word[i-1].isalpha() and word[i+1].isalpha():\n            return word[i]\n        \n    return \"\"  # If no vowel is found, return an empty string.",
    "match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be valid.\n    A string S is considered to be valid if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is valid, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a valid string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                count += 1\n            elif s[i] == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    lst = [x for x in lst if x != '']\n    if not lst:\n        return 'Yes'\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    if check(S1):\n        return 'Yes'\n    if check(S2):\n        return 'Yes'\n    return '",
    "def max_k(numbers: list, k: int):\n    \"\"\"\n    Given an array of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in the array.\n\n    Example 1:\n\n        Input: numbers = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: numbers = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: numbers = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range [1, 1000].\n        2. The elements in the array will be in the range [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not numbers or k == 0:\n        return []\n\n    numbers.sort(reverse=True)\n    return numbers[:k]",
    "def solution(lst):\n    \"\"\"Given a non-empty list of integers, determine the sum of all the unusual numbers that are in standard positions.\n\n    For instance:\n    solution([5, 8, 7, 1]) == 12\n    solution([3, 3, 3, 3, 3]) == 9\n    solution([30, 13, 24, 321]) == 0\n    \"\"\"\n    return sum(lst[i] for i in range(0, len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)",
    "def add_elements(numbers, cutoff):\n    \"\"\"\n    If given a list of numbers and a cutoff, return the sum of the elements with at most two digits from the first cutoff elements of the list.\n\n    For instance:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if not (1 <= len(numbers) <= 100 and 1 <= cutoff <= len(numbers)):\n        return None\n    \n    chosen_elements = [num for num in numbers[:cutoff] if len(str(num)) <= 2]\n    return sum(chosen_elements)",
    "def get_odd_collatz(n: int) -> list:\n    \"\"\"\n    Given a positive integer n, return a sorted list containing the odd numbers in the Collatz sequence.\n\n    The Collatz conjecture is a mathematical theory postulating a sequence defined as follows:\n    Begin with any chosen positive integer n. Each subsequent term is derived from the previous term as follows:\n    If the term is even, the following term is half its value.\n    If the term is odd, the following term is three times its value plus one.\n    The conjecture states that regardless of the initial value of n, the sequence will eventually reach the value 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. The returned list is sorted in ascending order.\n\n    For example:\n        get_odd_collatz(5) returns [1, 5] # The Collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1 and 5.\n    \"\"\"\n    if n & 1 == 0:  # Check if n is even\n        return []\n\n    odd_collatz = [n]\n\n    while n != 1:\n        if n & 1 == 0:  # Check if n is even\n            n //= 2\n        else:\n            n = 3 * n + 1\n        if n & 1 == 1:  # Check if n is odd\n            odd_collatz.append(n)\n\n    odd_collatz.sort()\n    return odd_collatz",
    "def validate_date(date_string):\n    \"\"\"Check if a given date string is valid.\n\n    The date is considered valid if it meets the following criteria:\n    - It is not empty.\n    - It contains days between 1 and 31 for months 1, 3, 5, 7, 8, 10, and 12.\n    - It contains days between 1 and 30 for months 4, 6, 9, and 11.\n    - It contains days between 1 and 29 for month 2.\n    - It contains months between 1 and 12.\n    - It is in the \"mm-dd-yyyy\" format.\n\n    Examples:\n        validate_date(\"03-11-2000\") == True\n        validate_date(\"15-01-2012\") == False\n        validate_date(\"04-0-2040\") == False\n        validate_date(\"06-04-2020\") == True\n        validate_date(\"06/04/2020\") == False\n    \"\"\"\n    if not date_string:\n        return False\n\n    date_string = date_string.strip()\n\n    if '-' not in date_string:\n        return False\n\n    month, day, year = map(int, date_string.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or (month in [1, 3, 5, 7, 8, 10, 12] and day > 31) or (month in [4, 6, 9, 11] and day > 30) or (month == 2 and day > 29):\n        return False\n\n    return True",
    "split_words(text):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the count of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    word_list = []\n    if \" \" in text:\n        word_list = text.split(\" \")\n    elif \",\" in text:\n        word_list = text.replace(\",\", \" \").split(\" \")\n    else:\n        for char in text:\n            if char>='a' and char <='z':\n                index = ord(char) - ord('a')\n                if (index + 1) % 2 != 0:\n                    word_list.append(char)\n    return word_l",
    "is_sorted(lst):\n    '''\n    Given an array of numbers, discern if they are arranged in ascending order. If the array contains more than one instance of the same number, return False. Assume no negative numbers and only integers.\n\n    For instance:\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    for num, count in count_dict.items():\n        if count > 2:\n            return False\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    return T",
    "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, find the sum of the absolute values of the integers multiplied by the product of the signs of each number in the array.\n    Signs are represented by 1 (positive), -1 (negative), or 0 (zero).\n    If the array is empty, return None.\n\n    Examples:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    product = -1 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    sum_abs = 0\n    for num in arr:\n        sum_abs += abs(num)\n    return product * sum_abs",
    "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the shortest path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the adjacent cells,\n    in other words, you can go to cells that share an edge with your current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT exit the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B take\n    (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exists an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the shortest path takes.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    n = len(grid)\n    minimum = n * n + 1\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                minimum = min(minimum, grid[i - 1][j])\n            if j > 0:\n                minimum = min(minimum, grid[i][j - 1])\n    result = [1] * k\n    for i in range(1, k + 1, 2):\n        result[i - 1] = minimum\n    return result",
    "def tri(n):\n    \"\"\"As you may know, the Fibonacci sequence has been a subject of great interest to mathematicians for centuries. But what you might not know is the Tribonacci sequence.\n\n    The Tribonacci sequence is another famous sequence defined by the following recurrence relation:\n    tri(1) = 3\n    tri(n) = 1 + n / 2 for even n.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1) for odd n.\n\n    For instance,\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n\n    Given a non-negative integer n, your task is to generate a list containing the first n + 1 numbers of the Tribonacci sequence.\n\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"",
    "def digits(n):\n    \"\"\"Given a positive integer n, return the product of its odd digits.\n    Return 0 if all digits are even.\n    For illustration:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    result = 1\n    odd_digit_count = 0\n\n    for char in str(n):\n        digit = int(char)\n        if digit % 2 == 1:\n            result *= digit\n            odd_digit_count += 1\n\n    if odd_digit_count == 0:\n        return 0\n    else:\n        return result",
    "is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is at least one valid sequence of brackets \n    where at least one bracket in the sequence is contained within another pair of brackets.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_brackets = []\n    closing_brackets = []\n\n    for i, char in enumerate(string):\n        if char == '[':\n            opening_brackets.append(i)\n        elif char == ']':\n            closing_brackets.append(i)\n\n    closing_brackets.reverse()\n\n    count = 0\n    i = 0\n    l = len(closing_brackets)\n\n    for index in opening_brackets:\n        if i < l and index < closing_brackets[i]:\n            count += 1\n            i += 1\n\n    return count >",
    "def sum_squares(lst):\n    \"\"\"Calculate the sum of squared numbers in a list.\n\n    Each element in the list is rounded up to the nearest integer before squaring.\n\n    Examples:\n    For lst = [1,2,3], the output should be 14.\n    For lst = [1,4,9], the output should be 98.\n    For lst = [1,3,5,7], the output should be 84.\n    For lst = [1.4,4.2,0], the output should be 29.\n    For lst = [-2.4,1,1], the output should be 6.\n    \"\"\"\n\n    total = 0\n    for number in lst:\n        total += int(math.ceil(number ** 2))\n    return total",
    "check_if_stray_character_is_alphabetic(sentence: str) -> bool:\n    '''\n    Determine whether the final character of the provided sentence is alphabetic and not part of a word.\n    A \"word\" is defined as a sequence of characters that are not separated by whitespace.\n\n    Example:\n    check_if_stray_character_is_alphabetic(\"apple pie\") \u279e False\n    check_if_stray_character_is_alphabetic(\"apple pi e\") \u279e True\n    check_if_stray_character_is_alphabetic(\"apple pi e \") \u279e False\n    check_if_stray_character_is_alphabetic(\"\") \u279e False\n    '''\n\n    # Empty strings have no stray characters to evaluate\n    if not sentence:\n        return False\n\n    # Split the sentence into words at whitespace boundaries\n    words = sentence.split()\n\n    # Examine the final word of the sentence\n    last_word = words[-1]\n\n    # If the final word consists of a single alphabetic character, return True; otherwise, return False\n    return last_word.isalpha() and len(last_word) =",
    "def can_arrange(arr):\n    \"\"\"Determine the index of the largest element not exceeding its preceding element in an array. Return -1 if none such element exists. Duplicates are not present.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index",
    "largest_smallest_integers(lst):\n    '''\n    Discover the largest negative and smallest positive integers in a list, returning them as a tuple. \n    If there are no negative integers, return None for the first value. \n    If there are no positive integers, return None for the second value.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positi",
    "def compare_values(first_value, second_value):\n    \"\"\"\n    Create a function that receives numbers (integers, floats, or strings representing\n    real numbers) and returns the larger value, keeping its original variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the separator might be . or ,\n\n    compare_values(1, 2.5) \u279e 2.5\n    compare_values(1, \"2,3\") \u279e \"2,3\"\n    compare_values(\"5,1\", \"6\") \u279e \"6\"\n    compare_values(\"1\", 1) \u279e None\n    \"\"\"",
    "def is_even_sum_of_4(n):\n    \"\"\"Check if a given number can be expressed as the sum of exactly four positive even numbers.\n\n    Examples:\n        is_even_sum_of_4(4) == False\n        is_even_sum_of_4(6) == False\n        is_even_sum_of_4(8) == True\n    \"\"\"",
    "def special_factorial(n):\n    \"\"\"Calculate the special Brazilian factorial of a given integer.\n\n    The Brazilian factorial of n, denoted as B(n), is defined as the product of all\n    factorials from 1 to n, inclusive. Formally, B(n) = 1! * 2! * 3! * ... * n!\n\n    For example, B(4) = 1! * 2! * 3! * 4! = 288\n\n    The function accepts a non-negative integer n and returns its special factorial.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial",
    "def refine_spacing(text):\n    \"\"\"\n    Transform spaces within a string into underscores, converting consecutive spaces greater than two into dashes.\n\n    Examples:\n        refine_spacing(\"Example\") == \"Example\"\n        refine_spacing(\"Example 1\") == \"Example_1\"\n        refine_spacing(\" Example 2\") == \"_Example_2\"\n        refine_spacing(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    modified_text = \"\"\n\n    index, start, end = 0, 0, 0\n\n    while index < len(text):\n        if text[index] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                modified_text += \"-\" + text[index]\n            elif end - start > 0:\n                modified_text += \"_\" * (end - start) + text[index]\n            else:\n                modified_text += text[index]\n            start = index + 1\n            end = index + 1\n        index += 1\n\n    if end - start > 2:\n        modified_text += \"-\"\n    elif end - start > 0:\n        modified_text += \"_\" * (end - start)\n\n    return modified_text",
    "def file_name_check(file_name):\n    \"\"\"Assesses a file's name for validity, returning 'Yes' if valid, 'No' otherwise.\n    Validity is defined by the following criteria:\n    1. No more than three numeric values (0-9) are present.\n    2. Exactly one period (.) marks the division between the file's name and extension.\n    3. The pre-period portion is non-empty and begins with an alphabetic character (a-z or A-Z).\n    4. The post-period portion is one of the following: 'txt', 'exe', or 'dll'.\n    Examples:\n    file_name_check(\"example.txt\") # -> 'Yes'\n    file_name_check(\"1example.dll\") # -> 'No' (starts with a numeric value)\"\"\"\n    \n    # Separates the file name into its pre-period and post-period components.\n    components = file_name.split('.')\n    \n    # Examines if the name meets the expected two-part structure.\n    if len(components) != 2:\n        return 'No'\n    \n    # Verifies if the post-period component matches an accepted extension.\n    if components[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Evaluates the pre-period component for validity.\n    pre_period = components[0]\n    if not pre_period or not pre_period[0].isalpha():\n        return 'No'\n    \n    # Checks if the pre-period component contains excessive numeric characters.\n    numeric_count = sum(1 for char in pre_period if char.isdigit())\n    if numeric_count > 3:\n        return 'No'\n    \n    # If all conditions are met, the name is considered valid.\n    return 'Yes'",
    "def sum_squares(lst):\n    \"\"\"\n    Let's say you have this list of numbers. We're going to work a little magic on it. For every number in the list that's at a spot that can be divided by 3 without any leftovers, we're going to square it. That means it'll be multiplied by itself. But wait, there's more! If a number's at a spot that can be divided by 4 without any leftovers and isn't already at a spot that can be divided by 3 without any leftovers, we're going to cube it. That's like squaring it, but then multiplying it by itself again. Don't worry, those are the only numbers we'll be changing. Once we've done our number magic, we'll add up all the numbers in the list and give you the grand total.\n\n    Examples:\n    For the list [1,2,3], the output should be 6.\n    For an empty list [], the output should be 0.\n    For the list [-1,-5,2,-1,-5], the output should be -126.\n    \"\"\"\n    result = []\n    for index in range(len(lst)):\n        if index % 3 == 0:\n            result.append(lst[index] ** 2)\n        elif index % 4 == 0 and index % 3 != 0:\n            result.append(lst[index] ** 3)\n        else:\n            result.append(lst[index])\n    return sum(result)",
    "def words_in_sentence_C(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    words = sentence.split()\n    prime_words = []\n\n    for word in words:\n        if len(word) == 2 or is_prime(len(word)):\n            prime_words.append(word)\n\n    return \" \".join(prime_words)\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True",
    "def simplify(x, n):\n    \"\"\"This function takes two fractions in the form \"numerator/denominator\" and returns\n    True if their product is a whole number, and False otherwise.\"\"\"\n    x_num, x_den = _parse_fraction(x)\n    n_num, n_den = _parse_fraction(n)\n    return (x_num * n_num) % (x_den * n_den) == 0\n\ndef _parse_fraction(fraction):\n    \"\"\"Parses a fraction in the form \"numerator/denominator\" into its numerator and denominator.\"\"\"\n    num, den = map(int, fraction.split('/'))\n    return num, den",
    "```\ndef order_by_points(numbers):\n    \"\"\"\n    Sort a list of integers in ascending order based on the sum of their digits.\n    If multiple integers have the same digit sum, maintain their original order.\n\n    For instance:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(number):\n        total = 0\n        number = abs(number)\n        number_string = str(number)\n        for i in range(len(number_string)):\n            total += int(number_string[i])\n        total -= number % 10\n        return total\n\n    sorted_numbers = sorted(numbers, key=digit_sum)\n\n    return sorted_numbers\n```",
    "def filter_oddities(numbers):\n    \"\"\" Count and return the number of elements in a given array of \n    numbers that surpass 10 and have both their first and final digits \n    composed of odd numbers (1, 3, 5, 7, 9). \n    Examples:\n        filter_oddities([15, -73, 14, -15]) = 1\n        filter_oddities([33, -2, -3, 45, 21, 109]) = 2  \n    \"\"\"\n    odd_digits = (1, 3, 5, 7, 9)\n    oddity_count = 0\n    for number in numbers:\n        if number <= 10:\n            continue\n        number_as_string = str(number)\n        first_digit = number_as_string[0]\n        last_digit = number_as_string[-1]\n        if int(first_digit) in odd_digits and int(last_digit) in odd_digits:\n            oddity_count += 1\n    return oddity_count",
    "def determine_maximum_tuples(limit):\n    return len([triplet for triplet in [\n        [((i ** 2) - i + 1), ((j ** 2) - j + 1), ((k ** 2) - k + 1)] \n        for i in range(1, limit + 1) \n        for j in range(i + 1, limit + 1) \n        for k in range(j + 1, limit + 1) \n        if sum(triplet) % 3 == 0]])",
    "bf(planet1, planet2):\n    '''\n    Our solar system features eight planets: Mercury, the closest to the Sun, followed by Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune.\n    Craft a function that accepts two planet names as strings, planet1 and planet2. This function should output a tuple containing all planets whose orbits reside between planet1's and planet2's orbits, organized by their proximity to the sun. \n    If planet1 or planet2 are not valid planet names, the function should return an empty tuple. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\n    if planet1 not in planets or planet2 not in planets or planet1 == planet2:\n        return ()\n\n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n    if i1 < i2:\n        return planets[i1+1:i2]\n    else:\n        return planets[i2+1:i1][::",
    "def list_sort(lst: list[str]) -> list[str]:\n    \"\"\"Provide a function receiving a list of strings,\n    eliminate any strings with odd lengths,\n    and furnish a sorted list of the remaining strings.\n    It is guaranteed that the input will be strings, not numbers,\n    and duplicates may occur.\n    Sort the list in ascending order by string length, then alphabetically\n    if the strings have equal lengths, and return the sorted list.\n    Assume all strings have the same length.\n    For instance:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    \"\"\"",
    "def x_or_y(n: int, x: int, y: int) -> int:\n    \"\"\"Determine the value to be returned based on whether the input number is prime.\n\n    If 'n' is prime, return the value of 'x'. Otherwise, return the value of 'y'.\n\n    Examples:\n        x_or_y(7, 34, 12) == 34\n        x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if n <= 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x",
    "def find_sum_of_squared_odd_numbers(numbers):\n    \"\"\"\n    Given a list of numbers, return the sum of the squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    Example:\n    find_sum_of_squared_odd_numbers([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    find_sum_of_squared_odd_numbers([-1, -2, 0]) == 0\n    find_sum_of_squared_odd_numbers([9, -2]) == 81\n    find_sum_of_squared_odd_numbers([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    sum_of_squares = 0\n    for number in numbers:\n        if isinstance(number, int) and number > 0 and number % 2 == 1:\n            sum_of_squares += number * number\n    return sum_of_squares",
    "def compare(game, guess):\n    \"\"\"The thrill of the moment when the verdict of a much-anticipated\n    event is finally unveiled. The emotions and reflections you experience in\n    that instant are worth savoring and pondering.\n\n    Your mission is to ascertain whether an individual's predictions\n    for the outcomes of a series of matches proved accurate. You are\n    presented with two sets of scores and guesses of equal length,\n    where each position represents a match. Produce a list of the same\n    length indicating the degree of deviation from the accurate score.\n    If the guess was spot-on, the value is 0; otherwise, it is the\n    absolute difference between the guess and the actual score.\n\n    For instance:\n\n    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) -> [0, 0, 0, 0, 3, 3]\n    compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) -> [4, 4, 1, 0, 0, 6]\n    \"\"\"\n\n    discrepancies = []\n\n    for index in range(len(game)):\n        discrepancy = abs(game[index] - guess[index])\n        discrepancies.append(discrepancy)\n\n    return discrepancies",
    "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the title of a class (a string) and a series of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the capital\n    letters in the extension's title, and let SM be the number of lowercase letters \n    in the extension's title, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionTitle.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the series.\n    For example, if you are given \"Slices\" as the class and a series of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    Powers = []\n    for item in extensions:\n        CAP = 0\n        SM = 0\n        for letter in range(len(item)):\n            if item[letter].isupper():\n                CAP += 1\n            else:\n                SM += 1\n        Powers.append(CAP - SM)\n    greatest = max(Powers)\n    location = Powers.index(greatest)\n    return f'{class_name}.{extensions[location]}'",
    "def cycpattern_check(word1, word2):\n    \"\"\"Given two words, determine if the second word or any of its rotations is a substring in the first word.\n\n    Examples:\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    \n    rotated_word2 = word2 + word2\n    \n    for i in range(len(word1)):\n        substring = word1[i:i + len(word2)]\n        if substring == rotated_word2[i:i + len(word2)]:\n            return True\n    \n    return False",
    "def count_even_odd_digits(number):\n    \"\"\"Determine the number of even and odd digits present in a given integer.\n\n    Args:\n        number (int): The integer to be analyzed.\n\n    Returns:\n        tuple: A tuple containing the count of even digits and odd digits, respectively.\n\n    Examples:\n        count_even_odd_digits(-12) == (1, 1)\n        count_even_odd_digits(123) == (1, 2)\n    \"\"\"",
    "def int_to_mini_roman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_values = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    roman_representation = \"\"\n    i = 0\n    while num > 0:\n        for _ in range(num // values[i]):\n            roman_representation += roman_values[i]\n            num -= values[i]\n        i += 1\n    return roman_representation",
    "right_angle_triangle(side_a, side_b, side_c):\n    '''\n    Given the lengths of the three sides of a triangle, ascertain if it constitutes a right-angled triangle. \n    A right-angled triangle possesses one angle that measures exactly 90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (side_a ** 2 == side_b ** 2 + side_c ** 2) or (side_b ** 2 == side_a ** 2 + side_c ** 2) or (side_c ** 2 == side_a ** 2 + side_b **",
    "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with the utmost number\n    of unique characters. If several strings have the maximum number of unique\n    characters, return the one that appears earlier in alphabetical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words.sort(key=lambda word: (-len(set(word)), word))\n    return words[0]",
    "def lunch(past_meal, today_course, pantry):\n    \"\"\"\n    You're a hungry rabbit, and you already have nibbled on some carrots,\n    but now you need to munch on some more carrots to fill your tummy for the day.\n    You should return an array of [ total carrots nommed after your meals,\n                                    the number of carrots left after your meals ]\n    If there are not enough carrots left, you will munch on all remaining carrots, but will still be peckish.\n\n    Example:\n    * lunch(5, 6, 10) -> [11, 4]\n    * lunch(4, 8, 9) -> [12, 1]\n    * lunch(1, 10, 10) -> [11, 0]\n    * lunch(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @past_meal : integer\n        the number of carrots that you have nibbled on.\n    @today_course : integer\n        the number of carrots that you need to munch on.\n    @pantry : integer\n        the number of carrots left in the garden\n\n    Constrain:\n    * 0 <= past_meal <= 1000\n    * 0 <= today_course <= 1000\n    * 0 <= pantry <= 1000\n\n    Bon appetit :)\n    \"\"\"\n\n    total_nommed = past_meal + min(today_course, pantry)\n    leftovers = pantry - min(today_course, pantry)\n    return [total_nommed, leftovers]",
    "def do_algebra(operation_list, operand_list):\n    \"\"\"\n    Given a list of basic algebra operations and a list of integers, return the evaluation of the algebraic expression built using these two lists.\n\n    The basic algebra operations are:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operation_list: ['+', '*', '-']\n    operand_list: [2, 3, 4, 5]\n    result: 2 + 3 * 4 - 5 = 9\n\n    Note:\n    - The length of operation_list is one less than the length of operand_list.\n    - Operand_list contains only non-negative integers.\n    - Operation_list contains at least one operator, and operand_list contains at least two operands.\n    \"\"\"\n\n    algebraic_expression = str(operand_list[0])\n\n    for operation, operand in zip(operation_list, operand_list[1:]):\n        algebraic_expression += f\" {operation} {operand}\"\n\n    return eval(algebraic_expression)",
    "def solve(s):\n    \"\"\"You are given a string s.\n    If a character at an index i is a letter, reverse its case from lower to upper or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    is_letter_present = False\n    result = []\n    for char in s:\n        if char.isalpha():\n            is_letter_present = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n\n    if not is_letter_present:\n        result.reverse()\n    \n    return ''.join(result)",
    "def convert_text_to_md5_hash(input_text):\n    \"\"\"\n    This function takes in a text string, processes it, and returns its MD5 hash equivalent as a string.\n    If the input text is empty, it returns None.\n\n    For example:\n    convert_text_to_md5_hash(\"Hello, world!\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\n    if not input_text:\n        return None\n\n    import hashlib\n    import binascii\n\n    # Convert the text to bytes using ASCII encoding.\n    text_bytes = input_text.encode(\"ascii\")\n\n    # Calculate the MD5 hash of the bytes.\n    md5_hash = hashlib.md5(text_bytes)\n\n    # Convert the hash to a hexadecimal string.\n    hexadecimal_hash = binascii.hexlify(md5_hash.digest())\n\n    # Return the hexadecimal string as the MD5 hash.\n    return hexadecimal_hash.decode(\"ascii\")",
    "def generate_integers(first_number, second_number):\n    \"\"\"\n    Given two positive integers, find and return the even digits between them, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    minimum = min(first_number, second_number)\n    maximum = max(first_number, second_number)\n    return [number for number in range(minimum, maximum + 1) if number % 2 == 0]"
]