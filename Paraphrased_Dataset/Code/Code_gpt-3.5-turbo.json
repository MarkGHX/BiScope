[
    "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if there are any two numbers in the given list that are closer to each other\n    than the specified threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
    "def retrieve_parentheses_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n            current_group += char\n        elif char == \")\":\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = \"\"\n    return result\n\n# Testing the function\nprint(retrieve_parentheses_groups(\"( ) (( )) (( )( ))\")) # Output: ['()', '(())', '(()())']",
    "def shorten_decimal(number: float) -> float:\n    return number % 1.0",
    "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
    "importing the necessary elements:\n\ncreating a function that can compute the mean absolute deviation for a list of numbers. This deviation is the average absolute difference of each number from the mean of the list.",
    "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
    "import re\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(group: str) -> int:\n        max_level = 0\n        curr_level = 0\n        for char in group:\n            if char == '(':\n                curr_level += 1\n                max_level = max(max_level, curr_level)\n            elif char == ')':\n                curr_level -= 1\n        return max_level\n\n    return [parse_paren_group(group) for group in re.findall(r'\\(([^()]*)\\)', paren_string)]\n\n# Testing the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]",
    "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]",
    "from typing import List, Tuple\n\ndef calculate_sum_and_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Given a list of integers, this function calculates the sum and product of all the integers in the list.\n    If the list is empty, the sum is 0 and the product is 1.\n    >>> calculate_sum_and_product([])\n    (0, 1)\n    >>> calculate_sum_and_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    \n    sum_val = sum(numbers)\n    product_val = 1\n    for num in numbers:\n        product_val *= num\n    \n    return sum_val, product_val",
    "import random\n\ndef capture_high_values(numbers: List[int]) -> List[int]:\n    highest_value = float('-inf')\n    captured_values = []\n    for num in numbers:\n        highest_value = max(highest_value, num)\n        captured_values.append(highest_value)\n    \n    return captured_values\n\nprint(capture_high_values([1, 2, 3, 2, 3, 4, 2]))",
    "def is_palindrome(word: str) -> bool:\n    return word == word[::-1]\n\n\ndef make_palindrome(word: str) -> str:\n    if not word:\n        return ''\n    \n    def is_palindrome_suffix(subword: str) -> bool:\n        return subword == subword[::-1]\n    \n    for i in range(len(word), 0, -1):\n        if is_palindrome_suffix(word[:i]):\n            return word + word[:i][::-1]\n    \n    return ''",
    "import List\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(char1: str, char2: str) -> str:\n        return '1' if char1 != char2 else '0'\n    \n    return ''.join([xor(char1, char2) for char1, char2 in zip(a, b)])",
    "def find_longest_string(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)",
    "def find_gcd(x: int, y: int) -> int:\n    while y:\n        x, y = y, x % y\n    return x\n\n# Checking with test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from typing module import List\n\ndef obtain_all_prefixes(text: str) -> List[str]:\n    outcomes = []\n    for index in range(1, len(text) + 1):\n        outcomes.append(text[:index])\n    return outcomes",
    "def create_sequence_of_numbers(n: int) -> str:\n    return ' '.join([str(i) for i in range(n + 1)])",
    "def count_unique_characters(text: str) -> int:\n    \"\"\" Given a text, determine the number of unique characters (without considering case sensitivity)\n    >>> count_unique_characters('xyzXYZ')\n    3\n    >>> count_unique_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(text.lower()))",
    "import re\n\ndef extract_notes(music_string: str) -> List[int]:\n    note_values = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = re.findall(r'\\b\\w+\\b', music_string)\n    beats = [note_values[note] for note in notes]\n    \n    return beats\n\n# Check the function\nprint(extract_notes('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
    "Calculate how often a specific substring appears in a given string.",
    "arrange_numbers(sequences: str) -> str:\n    digit_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sequences_list = sequences.split()\n    ordered_numbers = sorted(sequences_list, key=lambda x: digit_dict[x])\n    return ' '.join(ordered_numbers)",
    "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    min_difference = float('inf')\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            current_difference = abs(numbers[i] - numbers[j])\n            if current_difference < min_difference:\n                min_difference = current_difference\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    \n    return closest_pair\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    lowest_number = min(numbers)\n    highest_number = max(numbers)\n    rescaled_values = [(x - lowest_number) / (highest_number - lowest_number) for x in numbers]\n    return rescaled_values",
    "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Select only the integers from the provided list of Python values.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]",
    "def get_length(text: str) -> int:\n    \"\"\"Return the length of the specified text\n    >>> get_length('')\n    0\n    >>> get_length('abc')\n    3\n    \"\"\"\n    return len(text)",
    "find the biggest factor of a given number:",
    "importing List from the typing module\n\ndefine a function called factorize that takes an integer n as an argument and returns a list of integers.\nInitialize an empty list called fact.\nStart a loop with i starting at 2.\nContinue the loop as long as the square of i is less than or equal to n.\nIf n is not divisible by i:\nIncrease i by 1.\nOtherwise:\nDivide n by i.\nAdd i to the fact list.\nIf n is greater than 1:\nAdd n to the fact list.\nReturn the fact list.",
    "importing the List type from typing module\nimporting Counter from collections module\n\ndef eliminate_repeats(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if Counter(numbers)[num] == 1]",
    "def adjust_case(string: str) -> str:\n    return string.swapcase()",
    "importing List from typing library\n\ndef concatenate(strings: List[str]) -> str:\n    return ' '.join(strings)",
    "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
    "def retrieve_positive_elements(ls):\n    return [num for num in ls if num > 0]",
    "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
    "import math\n\ndef poly(coefficient_list: list, x_value: float):\n    return sum([coeff * math.pow(x_value, index) for index, coeff in enumerate(coefficient_list)])\n\ndef find_zero(coefficient_list: list):\n    left_bound = -1000\n    right_bound = 1000\n    tolerance = 1e-7\n    \n    while abs(right_bound - left_bound) > tolerance:\n        middle = (left_bound + right_bound) / 2\n        y_val = poly(coefficient_list, middle)\n        \n        if y_val == 0:\n            return middle\n        elif y_val * poly(coefficient_list, left_bound) < 0:\n            right_bound = middle\n        else:\n            left_bound = middle\n    \n    return (left_bound + right_bound) / 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "Arrange every third element in the list in ascending order.",
    "def unique(l: list):\n    \"\"\"Get the sorted unique elements from a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))",
    "def highest_value(numbers: list):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num",
    "def fizz_buzz(n: int):\n    total = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            total += str(i).count('7')\n    return total\n\n# Test cases\nprint(fizz_buzz(50))  # Output should be 0\nprint(fizz_buzz(78))  # Output should be 2\nprint(fizz_buzz(79))  # Output should be 3",
    "Arrange the even-indexed elements in ascending order and pair them with the odd-indexed elements. If there are more even indexed elements, add the last even indexed element to the list.",
    "decode_cyclic(string: str):\n    \"\"\"\n    converts a string that was encoded using the encode_cyclic function back to its original form.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(string))",
    "find prime Fibonacci number of 1: 2\nfind prime Fibonacci number of 2: 3\nfind prime Fibonacci number of 3: 5\nfind prime Fibonacci number of 4: 13\nfind prime Fibonacci number of 5: 89",
    "Check if there are three numbers in the list that sum up to zero.",
    "def car_race_collision(n: int):\n    return n ** 2",
    "def increment_list(lst: list):\n    return [elem + 1 for elem in lst]",
    "Determine if there are any two distinct integers in the list that add up to zero or else return False.",
    "def convert_to_base(x: int, base: int):\n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result\n\n# Testing the function with the provided test cases\nprint(convert_to_base(8, 3))  # Output: '22'\nprint(convert_to_base(8, 2))  # Output: '1000'\nprint(convert_to_base(7, 2))  # Output: '111'",
    "Calculate the area of a triangle by multiplying the base and height, then dividing the result by 2.",
    "def fibonacci(n: int):\n    numbers = [0, 0, 2, 0]\n    if n <= 3:\n        return numbers[n]\n    for i in range(4, n+1):\n        numbers[3] = numbers[2] + numbers[1] + numbers[0] + numbers[3]\n        numbers[0], numbers[1], numbers[2] = numbers[1], numbers[2], numbers[3]\n    return numbers[-1]",
    "Calculate the median of a given list by sorting it first. If the length of the list is odd, return the middle value. If it is even, average the two middle values.",
    "def is_palindrome(text: str):\n    \"\"\"\n    Checks if the provided text is a palindrome.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)//2):\n        if text[i] != text[-i-1]:\n            return False\n    return True",
    "def find_mod_power(n: int, p: int):\n    return pow(2, n, p)",
    "def encode_shift(s: str):\n     return \"\".join([chr(((ord(char) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for char in s])\n\ndef decode_shift(s: str):\n     return \"\".join([chr(((ord(char) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for char in s])",
    "def erase_vowels(content):\n    return ''.join([letter for letter in content if letter.lower() not in 'aeiou'])",
    "Check if the elements in the list are less than the specified threshold value.",
    "def combine(x: int, y: int):\n    return x + y",
    "Check if both strings contain the same characters.",
    "Calculate the Fibonacci sequence value for the given positive integer n.",
    "fix_mismatched_brackets(brackets: str):\n    depth = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            depth += 1\n        elif bracket == \">\":\n            depth -= 1\n            if depth < 0:\n                return False\n    return depth == 0",
    "Check if a list is monotonous by ensuring that each element is either increasing or decreasing consecutively.",
    "def find_common_elements(list1: list, list2: list):\n    common_elements = set()\n    for item in list1:\n        if item in list2:\n            common_elements.add(item)\n    return sorted(list(common_elements))",
    "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int):\n    largest = 1\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            largest = i\n    return largest\n\n# sample tests\nprint(largest_prime_factor(13195))  # Result: 29\nprint(largest_prime_factor(2048))   # Result: 2",
    "Calculate the sum up to n by using the formula n*(n+1)//2.\n\nimport doctest\ndoctest.testmod()",
    "fix_proper_bracketing(brackets: str):\n    level = 0\n    for bracket in brackets:\n        if bracket == '(':\n            level += 1\n        elif bracket == ')':\n            level -= 1\n        if level < 0:\n            return False\n    return level == 0",
    "Calculate the derivative of xs: a list, and then return the resulting list excluding the first element.",
    "calculate_fibonacci(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2) + calculate_fibonacci(n-3)",
    "count_vowels(text):\n    text = text.lower()\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(text)):\n        if text[i] in vowels:\n            count += 1\n        if i == len(text) - 1 and text[i] == 'y':\n            count += 1\n\n    return count\n\n# Test cases\nassert count_vowels(\"abcde\") == 2\nassert count_vowels(\"ACEDY\") == 3\nassert count_vowels(\"hello\") == 2\nassert count_vowels(\"crazy\") == 2\nassert count_vowels(\"Yesterday\") == 4",
    "perform_circular_shift(input_value, shift_amount):\n    value_as_string = str(input_value)\n    \n    if shift_amount > len(value_as_string):\n        return value_as_string[::-1]\n    \n    shift_amount %= len(value_as_string)\n    return value_as_string[-shift_amount:] + value_as_string[:-shift_amount]",
    "calculateDigitSum(s):\n    sum_total = 0\n    for character in s:\n        if character.isupper():\n            sum_total += ord(character)\n    return sum_total",
    "distribute_fruits(s, n):\n    apples, oranges = map(int, [i for i in s.split() if i.isdigit()])\n    mangoes = n - apples - oranges\n    return mangoes",
    "grab(arr):\n    if len(arr) == 0:\n        return []\n    \n    even_numbers = [num for num in arr if num % 2 == 0]\n    \n    if len(even_numbers) == 0:\n        return []\n    \n    minimum_even = min(even_numbers)\n    position = arr.index(minimum_even)\n    \n    return [minimum_even, position]",
    "def find_highest_freq(lst):\n    highest_num = max(lst)\n    frequency = [0] * (highest_num + 1)\n    \n    for num in lst:\n        frequency[num] += 1\n\n    result = -1\n    for i in range(1, highest_num + 1):\n        if i <= highest_num and frequency[i] >= i:\n            result = max(result, i)\n\n    return result\n\n# Example tests\nprint(find_highest_freq([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(find_highest_freq([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(find_highest_freq([5, 5, 4, 4, 4]))  # Output: -1",
    "def sort_list_weird(lst):\n    result = []\n    toggle = True\n    while lst:\n        if toggle:\n            result.append(min(lst))\n        else:\n            result.append(max(lst))\n        lst.remove(result[-1])\n        toggle = not toggle\n    return result",
    "calculate_triangle_area(side1, side2, side3):\n    if side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1:\n        semi_perimeter = (side1 + side2 + side3) / 2\n        area = (semi_perimeter * (semi_perimeter - side1) * (semi_perimeter - side2) * (semi_perimeter - side3)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(calculate_triangle_area(3, 4, 5))  # Output: 6.0\nprint(calculate_triangle_area(1, 2, 10))  # Output: -1",
    "def will_it_fly(pilot, weight):\n    if pilot == pilot[::-1] and sum(pilot) <= weight:\n        return True\n    else:\n        return False",
    "def find_smallest_difference(array):\n    result = 0\n    for i in range(len(array)//2):\n        if array[i] != array[-i-1]:\n            result += 1\n    return result",
    "calculate total characters in lst1 and lst2\nif the total characters in lst1 are less than or equal to lst2, return lst1; otherwise, return lst2.",
    "def is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(num):\n    for i in range(2, 100):\n        if is_prime(i):\n            for j in range(i, 100):\n                if is_prime(j):\n                    for k in range(j, 100):\n                        if is_prime(k):\n                            if i * j * k == num:\n                                return True\n    return False\n\n# Example\nprint(is_multiply_prime(30)) # Output: True",
    "Check if a number is a simple power.",
    "def is_cube_number(number):\n    return int(round(number ** (1. / 3))) ** 3 == abs(number)",
    "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    tally = 0\n    for digit in num:\n        if digit in primes:\n            tally += 1\n    return tally",
    "Convert a number from base 10 to base 2 and represent it in binary form as a string.",
    "is_satisfied(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True",
    "def letter_grade(grades):\n    def convert_grade(score):\n        if score == 4.0:\n            return 'A+'\n        elif score > 3.7:\n            return 'A'\n        elif score > 3.3:\n            return 'A-'\n        elif score > 3.0:\n            return 'B+'\n        elif score > 2.7:\n            return 'B'\n        elif score > 2.3:\n            return 'B-'\n        elif score > 2.0:\n            return 'C+'\n        elif score > 1.7:\n            return 'C'\n        elif score > 1.3:\n            return 'C-'\n        elif score > 1.0:\n            return 'D+'\n        elif score > 0.7:\n            return 'D'\n        elif score > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [convert_grade(score) for score in grades]",
    "import math\n\ndef prime_length(text):\n    if len(text) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(text)))+1):\n        if len(text) % i == 0:\n            return False\n    return True\n\n# Examples\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False",
    "def begins_with_one_finishes_at(n):\n    if n == 1:\n        return 1\n    else:\n        return 18 * 10 ** (n - 2)",
    "def calculate_sum(N):\n    total_sum = sum(int(num) for num in str(N))\n    binary_sum = bin(total_sum)[2:]\n    return binary_sum",
    "def add(numbers):\n    return sum(num for num in numbers[1::2] if num % 2 == 0)\n",
    "def unscramble_phrase(phrase):\n    words = phrase.split()\n    ordered_words = []\n    \n    for word in words:\n        arranged_word = ''.join(sorted(word))\n        ordered_words.append(arranged_word)\n    \n    return ' '.join(ordered_words)",
    "def retrieve_row(lst, x):\n    positions = []\n    \n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                positions.append((i, j))\n    \n    positions.sort()\n    return sorted(positions, key=lambda x: x[1], reverse=True)",
    "def arrange_elements(list):\n    organized_list = sorted(list)\n    if (organized_list[0] + organized_list[-1]) % 2 == 0:\n        return organized_list[::-1]\n    else:\n        return organized_list\n\n# Examples\nprint(arrange_elements([]))  # []\nprint(arrange_elements([5]))  # [5]\nprint(arrange_elements([2, 4, 3, 0, 1, 5]))  # [0, 1, 2, 3, 4, 5]\nprint(arrange_elements([2, 4, 3, 0, 1, 5, 6]))  # [6, 5, 4, 3, 2, 1, 0]",
    "def encode(message):\n    key = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for letter in message:\n        if letter.isalpha():\n            position = (key.index(letter) + 2) % 26\n            new_letter = key[position]\n            result += new_letter\n        else:\n            result += letter\n    return result",
    "def find_next_smallest(numbers):\n    sorted_unique_numbers = sorted(set(numbers))\n    if len(sorted_unique_numbers) < 2:\n        return None\n    return sorted_unique_numbers[1]",
    "import re\n\ndef is_bored(S):\n    pattern = r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?|\\!)\\s'\n    sentences = re.split(pattern, S)\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n\n# Examples\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
    "def is_integer(num):\n    return isinstance(num, int)\n\ndef any_integer(x, y, z):\n    if is_integer(x) and is_integer(y) and is_integer(z):\n        return x == y + z or y == x + z or z == x + y\n    return False",
    "encode(words)",
    "define a function that takes a list as input, then checks for prime numbers within the list. If any prime number is found, it calculates the sum of its individual digits, otherwise returns 0.",
    "def verify_dictionary_casing(dictionary):\n    if not dictionary:\n        return False\n    \n    is_lowercase = all(key.islower() for key in dictionary.keys() if isinstance(key, str))\n    is_uppercase = all(key.isupper() for key in dictionary.keys() if isinstance(key, str))\n    \n    return is_lowercase or is_uppercase",
    "def list_prime_numbers_up_to(number):\n    prime_numbers = []\n    for num in range(2, number):\n        is_prime = True\n        for divisor in range(2, num):\n            if num % divisor == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers",
    "multiply(a, b):\n    \"\"\"\n   Perform the operation of taking two integers and providing \nthe result that equals the multiplication of their last digits.\nThe assumption made is that the provided input is always valid.\nExamples:\nmultiply(148, 412) must give 16.\nmultiply(19, 28) must give 72.\nmultiply(2020, 1851) must give 0.\nmultiply(14,-15) must give 20.\n\"\"\"\n    \n    # Obtain the last digits\n    unit_a = abs(a % 10)\n    unit_b = abs(b % 10)\n    \n    # Compute the multiplication of the last digits\n    result = unit_a * unit_b\n    \n    return result",
    "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count",
    "find_closest_whole_number(val):\n    if not val:\n        go_back(0)\n    \n    if '.' in val:\n        val = val.strip('0')\n    \n    number = float(val)\n    if number % 1 == 0.5:\n        go_back(int(number + (number > 0)))\n    \n    go_back(round(number))",
    "create a pile of numbers with the specified amount. The numbers are stacked based on a certain pattern.",
    "def string_to_words(s):\n    return s.replace(',', ' ').split()",
    "select_number(x, y):\n    if x is greater than y:\n        return -1\n    if y is even:\n        return y\n    if x is equal to y:\n        return -1\n    return y decreased by 1",
    "Calculate the average and round it accordingly before converting it to binary.",
    "find_numbers_with_unique_digits(x):\n    odd_digit_elements = []\n    for num in x:\n        num_str = str(num)\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            odd_digit_elements.append(num)\n    return sorted(odd_digit_elements)",
    "sort_numbers_by_length(array):\n    number_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    array = sorted([number for number in array if 1 <= number <= 9], reverse=True)\n    return [number_to_word[number] for number in array]",
    "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result_list.append(factorial(i))\n        else:\n            result_list.append(sum(range(1, i + 1)))\n    return result_list\n",
    "Check if numbers are palindrome and count the frequency of even and odd palindromic numbers within a given range.",
    "def count_numbers(list_of_numbers):\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(abs(number)))\n    \n    total_count = 0\n    for number in list_of_numbers:\n        if sum_of_digits(number) > 0:\n            total_count += 1\n    return total_count\n\nimport doctest\ndoctest.testmod()",
    "move_one_ball(arr) checks if there is at least one element in the array. If a ball exists, the function rearranges the balls to sort them in ascending order. Then, it checks if the balls are sorted as expected and returns the result.",
    "exchange(list1, list2):\n    count_even_list1 = sum(1 for num in list1 if num % 2 == 0)\n    count_odd_list1 = sum(1 for num in list1 if num % 2 == 1)\n    count_even_list2 = sum(1 for num in list2 if num % 2 == 0)\n    count_odd_list2 = sum(1 for num in list2 if num % 2 == 1)\n    \n    return \"YES\" if count_odd_list1 <= count_even_list2 else \"NO\"",
    "def histogram(test):\n    if test:\n        words = test.split()\n        count_dict = {}\n        \n        for word in words:\n            if word in count_dict:\n                count_dict[word] += 1\n            else:\n                count_dict[word] = 1\n                \n        max_count = max(count_dict.values())\n\n        result = {word: count for word, count in count_dict.items() if count == max_count}\n\n        return result\n    else:\n        return {}",
    "reverse_remove(input_string, chars_to_remove):\n    final_result = ''.join([character for character in input_string if character not in chars_to_remove])\n    return final_result, final_result == final_result[::-1]",
    "def count_odd_elements(lst):\n    return [\"The count of odd elements in the string {} of the input.\".format(len([c for c in string if int(c) % 2 != 0])) for string in lst]",
    "Calculate the minimum sum of a subarray in a given list of numbers, take the primary number as a starting point, check and update the maximum and minimum cumulative sums encountered so far, and determine the minimum sum to be returned. \ud83d\ude80",
    "calculate_maximum_payload(grid, capacity):\n    import math\n    \n    total_drops = 0\n    \n    for row in grid:\n        total_drops += math.ceil(sum(row) / capacity)\n    \n    return total_drops",
    "def arrange_list(nums):\n    return sorted(nums, key=lambda num: (bin(num).count('1'), num))",
    "def pick_words(input_string, number):\n    if not input_string:\n        return []\n    \n    vowels = \"aeiou\"\n    output = []\n    \n    words_list = input_string.split()\n    \n    for current_word in words_list:\n        consonant_count = sum(1 for char in current_word if char.lower() not in vowels)\n        if consonant_count == number:\n            output.append(current_word)\n    \n    return output",
    "find_nearest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"\n\n# Test cases\nprint(find_nearest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(find_nearest_vowel(\"FULL\"))    # Output: \"U\"\nprint(find_nearest_vowel(\"quick\"))   # Output: \"\"\nprint(find_nearest_vowel(\"ab\"))      # Output: \"\"",
    "def matching_parentheses_list(lst):\n    def verify(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    string1 = lst[0] + lst[1]\n    string2 = lst[1] + lst[0]\n\n    if verify(string1) or verify(string2):\n        return 'Yes'\n    else:\n        return 'No'",
    "find_largest_elements(list_numbers, num_elements):\n    if num_elements == 0:\n        return []\n\n    sorted_list = sorted(list_numbers)\n    return sorted_list[-num_elements:]",
    "def solution(lst):\n    return sum([num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 != 0])\n",
    "function add_elements(array, limit):\n    return sum([number for number in array[:limit] if len(str(number)) <= 2])",
    "fetch_odd_collatz_values(num):\n    odd_numbers = []\n    \n    if num % 2 == 0:\n        return odd_numbers\n    \n    odd_numbers.append(num)\n    \n    while num != 1:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = 3 * num + 1\n            \n        if num % 2 != 0:\n            odd_numbers.append(num)\n    \n    return sorted(odd_numbers)",
    "validate_date(input_date):\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', input_date):\n        return False\n    \n    month, day, year = map(int, input_date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n\n    return True",
    "def break_into_words(text):\n    if ' ' in text:\n        return text.split()\n    elif ',' in text:\n        text = text.replace(',', ' ')\n        return text.split()\n    else:\n        return sum(1 for char in text if char.islower() and ord(char) % 2 == 1)",
    "def is_ordered(lst):\n    number_count = {}\n    for number in lst:\n        if number in number_count:\n            number_count[number] += 1\n        else:\n            number_count[number] = 1\n\n    for number in number_count.values():\n        if number > 2:\n            return False\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True",
    "find common interval between two intervals and if the length of it is a prime number, return \"YES\"; otherwise, return \"NO\".",
    "calculate_product_signs(lst):\n    if not lst:\n        return None\n\n    total = 1\n    sum_of_values = 0\n    for item in lst:\n        if item < 0:\n            total *= -1\n            sum_of_values += abs(item)\n        elif item > 0:\n            sum_of_values += item\n\n    return total * sum_of_values",
    "def min_route(grid, k):\n    def find_origin(grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    return (i, j)\n\n    def find_adjacent(x, y):\n        adjacent = []\n        if x > 0:\n            adjacent.append((x - 1, y))\n        if x < len(grid) - 1:\n            adjacent.append((x + 1, y))\n        if y > 0:\n            adjacent.append((x, y - 1))\n        if y < len(grid[0]) - 1:\n            adjacent.append((x, y + 1))\n        return adjacent\n\n    def min_neighboring_value(x, y):\n        adjacent = find_adjacent(x, y)\n        min_val = float('inf')\n        for nx, ny in adjacent:\n            if grid[nx][ny] < min_val:\n                min_val = grid[nx][ny]\n        return min_val\n\n    def establish_path(start_x, start_y, min_val):\n        path = []\n        while k > 0:\n            path.append(grid[start_x][start_y])\n            if grid[start_x][start_y] == 1:\n                k -= 1\n            else:\n                min_val = min_neighboring_value(start_x, start_y)\n            for nx, ny in find_adjacent(start_x, start_y):\n                if grid[nx][ny] == min_val:\n                    start_x, start_y = nx, ny\n                    break\n        return path\n\n    start_x, start_y = find_origin(grid)\n    min_val = min_neighboring_value(start_x, start_y)\n    return establish_path(start_x, start_y, min_val)",
    "calculate_triangular_numbers(n):\n    sequence = [0] * (n + 1)\n    if n > 0:\n        sequence[1] = 1\n    if n > 1:\n        sequence[2] = 1\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence[i] = sequence[i - 1] + 1 + i // 2\n        else:\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n    return sequence",
    "def digits(n):\n    odd_product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_product *= digit\n            has_odd = True\n        n //= 10\n    return odd_product if has_odd else 0",
    "confirm_nested(string):\n    opened_brackets = []\n    nested_found = []\n\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            opened_brackets.append(i)\n        elif string[i] == \"]\":\n            if opened_brackets:\n                nested_found.append((opened_brackets.pop(), i))\n\n    return len(nested_found) >= 2\n\nprint(confirm_nested('[[]]'))  # True\nprint(confirm_nested('[]]]]]]][[[[[]'))  # False\nprint(confirm_nested('[][]'))  # False\nprint(confirm_nested('[]'))  # False\nprint(confirm_nested('[[][]]'))  # True\nprint(confirm_nested('[[]][['))  # True",
    "import math\n\ndef get_sum_of_squares(numbers):\n    result = 0\n\n    for num in numbers:\n        result += math.ceil(num) ** 2\n\n    return result",
    "verify_if_last_character_is_a_letter(txt):\n    words = txt.split()\n    last_word = words[-1] if words else ''\n    if len(last_word) == 1 and 97 <= ord(last_word) <= 122:\n        return True\n    return False\n\n# Test cases\nprint(verify_if_last_character_is_a_letter(\"apple pie\"))  # False\nprint(verify_if_last_character_is_a_letter(\"apple pi e\"))  # True\nprint(verify_if_last_character_is_a_letter(\"apple pi e \"))  # False\nprint(verify_if_last_character_is_a_letter(\"\"))  # False",
    "def find_disorder_index(arr):\n    disorder_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            disorder_index = i - 1\n    return disorder_index",
    "find_max_min_numbers(lst):\n    negatives = list(filter(lambda x: x < 0, lst))\n    positives = list(filter(lambda x: x > 0, lst))\n\n    largest_negative = None\n    smallest_positive = None\n\n    if negatives:\n        largest_negative = max(negatives)\n\n    if positives:\n        smallest_positive = min(positives)\n\n    return (largest_negative, smallest_positive)",
    "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        \n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n        \n    if a > b:\n        return type(a)(a)\n    else:\n        return type(b)(b)\n\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None",
    "def is_sum_even_equal(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True",
    "calculate_special_factorial(n):\n    factorial_i = 1\n    special_factorial = 1\n    \n    for i in range(1, n+1):\n        factorial_i = 1\n        for j in range(1, i+1):\n            factorial_i *= j\n        special_factorial *= factorial_i\n    \n    return special_factorial",
    "correct_spaces(message):\n    updated_message = \"\"\n    repeat_spaces = 0\n    i = 0\n\n    while i < len(message):\n        if message[i] == \" \":\n            repeat_spaces += 1\n            if repeat_spaces > 2:\n                updated_message += \"-\"\n        else:\n            if repeat_spaces <= 2:\n                updated_message += \"_\" * repeat_spaces\n            else:\n                updated_message += \"-\"\n            updated_message += message[i]\n            repeat_spaces = 0\n        i += 1\n\n    if repeat_spaces <= 2:\n        updated_message += \"_\" * repeat_spaces\n    else:\n        updated_message += \"-\"\n    \n    return updated_message\n\nprint(correct_spaces(\"Example\")) # \"Example\"\nprint(correct_spaces(\"Example 1\")) # \"Example_1\"\nprint(correct_spaces(\" Example 2\")) # \"_Example_2\"\nprint(correct_spaces(\" Example   3\")) # \"_Example-3\"",
    "validate_file_name(file_name):\n    if sum(character.isdigit() for character in file_name) > 3:\n        return 'No'\n\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n\n    before_dot, after_dot = parts\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'",
    "def calculate_sum_of_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",
    "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)",
    "simplify_fraction(x, n):\n    x_numerator, x_denominator = list(map(int, x.split(\"/\")))\n    n_numerator, n_denominator = list(map(int, n.split(\"/\")))\n    \n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    \n    if result_numerator % result_denominator == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(simplify_fraction(\"1/5\", \"5/1\"))  # True\nprint(simplify_fraction(\"1/6\", \"2/1\"))  # False\nprint(simplify_fraction(\"7/10\", \"10/2\"))  # False",
    "def order_by_points(numbers):\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(abs(number)))\n\n    return sorted(numbers, key=lambda x: (sum_of_digits(x), numbers.index(x)))",
    "def special_filter(numbers):\n    counter = 0\n    for number in numbers:\n        if number > 10 and int(str(number)[0]) % 2 != 0 and int(str(number)[-1]) % 2 != 0:\n            counter += 1\n    return counter",
    "import itertools\n\ndef calculate_max_triples(num):\n    sequence = [i * i - i + 1 for i in range(1, num+1)]\n    triplets = [x for x in itertools.combinations(sequence, 3) if sum(x) % 3 == 0]\n    return len(triplets)",
    "def find_in_btw(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\n    if planet1 not in planets or planet2 not in planets or planet1 == planet2:\n        return ()\n\n    starting_point = min(planets.index(planet1), planets.index(planet2))\n    ending_point = max(planets.index(planet1), planets.index(planet2))\n\n    return tuple(planet for planet in planets[starting_point+1:ending_point] if planet != planet1 and planet != planet2)",
    "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
    "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    if is_prime(n):\n        return x\n    return y",
    "double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0) if lst else 0",
    "def compare(game, guess):\n    return [abs(score - prediction) if score != prediction else 0 for score, prediction in zip(game, guess)]",
    "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for char in ext if char.isupper()) - sum(1 for char in ext if char.islower())\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"",
    "def check_cyclic_pattern(a , b):\n    combined = a + a\n    for i in range(len(b)):\n        if combined[i:i+len(b)] == b:\n            return True\n    return False",
    "count_even_odd_numbers(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
    "```\ndef convert_number_to_mini_roman(number):\n    numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    converted_roman = \"\"\n    \n    i = 0\n    while number > 0:\n        for _ in range(number // numbers[i]):\n            converted_roman += roman_numerals[i]\n            number -= numbers[i]\n        i += 1\n    \n    return converted_roman.lower()\n```",
    "Check if the given sides create a right-angle triangle.",
    "def find_largest_word(words):\n    words = sorted(words, key=lambda x: (-len(set(x)), x))\n    return words[0] if words else \"\"",
    "consume(quantity, required, left):\n    consumed = 0\n    if required <= left:\n        consumed = required\n        left -= consumed\n    else:\n        consumed = left\n        left = 0\n    \n    total_consumed = quantity + consumed\n    return [total_consumed, left]",
    "def solve_algebra(operator, operand):\n    equation = \"\"\n    for i in range(len(operator)):\n        equation += str(operand[i]) + \" \" + operator[i] + \" \"\n    equation += str(operand[-1])\n    return eval(equation)",
    "def convert_case(s):\n    if not any(letter.isalpha() for letter in s):\n        return s[::-1]\n    \n    new_str = ''\n    for letter in s:\n        if letter.isalpha():\n            if letter.isupper():\n                new_str += letter.lower()\n            else:\n                new_str += letter.upper()\n        else:\n            new_str += letter\n\n    return new_str",
    "import hashlib\n\ndef convert_string_to_md5(text):\n    if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()",
    "create a list of even numbers between a and b inclusive, ranging from 2 to 8."
]